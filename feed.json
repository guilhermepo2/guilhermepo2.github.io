{
    "version": "https://jsonfeed.org/version/1",
    "title": "gueepo",
    "home_page_url": "https://gueepo.me/",
    "feed_url": "https://gueepo.me/feed.json",
    "description": null,
    "icon": "https://gueepo.me/apple-touch-icon.png",
    "favicon": "https://gueepo.me/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "gueepo",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://gueepo.me/2022/07/14/state-of-gueepo2d",
            "title": "state of gueepo2D",
            "summary": null,
            "content_text": "In case you are here by accident or some other reason, I am currently developing a simple 2D game engine in C++, you can find it on github - even it’s been enough time, maybe you can even make a game with it now!Last month I embarked in a journey of rendering fonts on my 2D game engine, it was fun, it was a lot of work, but eventually I’ve made it. And then I didn’t do any work on the engine for way more than a month.In my defense, I moved to the other side of the United States, I have been working some overtime lately, and I’ve traveled to Brazil, the last 8 weeks or so were hectic.And every time I stay away too much from a project I start having a lot of second thoughts about it. Is this game engine any good? Does it have a future? What am I trying to do? Where am I trying to go?And I promised myself I wouldn’t start a new game engine, and honestly, starting another game engine right now wouldn’t solve anything, but after thinking a lot about it, I am fairly convinced that gueepo2D needs a redesign and some restructuring.The first question to answer when approaching this redesign is: “What are my goals with gueepo2D?”, “What do I want gueepo2D to be?”I’ve looked around at some other game-making libraries, and the ones that I like the most are libGDX and MonoGame. These are basically simple frameworks that contains a renderer, input handling, a math library, audio, and an application framework providing a window and your typical game engine-like messaging systems, like Begin, Update, Render, etc…And I think a realistic goal is to have gueepo2D be something on those lines, but in C++. One of my goals was always for it to be beginner friendly, a place where you can actually make and ship games, but a place where you can also learn game development and/or C++.Right off the bat, the current state of gueepo2D is that it was trying to be way more than that, after reviewing some of the modules there are two that immediately stand out that could be totally removed:  The entity-component system;  The event system.The event system is a way to abstract application events, like when a window close, when it is resized, input events, things like that. I can imagine a world where this is needed in case I decide to run the engine both on SDL2 and to have a native Windows… Window… But worst case scenario, I can just add it back if it’s needed.The entity-component system is more of an interesting problem. It is a fairly important feature when making a game, but, honestly, the current ECS on gueepo2D is average at best, it abuses the usage of C++ templates, which I highly dislike, and even then, it’s quite hard to customize and navigate around. I’m leaning more towards not having ECS as part of the engine, and leave it up to the user. What I will probably end up doing is having a “gueepo2D-ecs” that will work sort of as an “add-on” to the engine.This also means that some features might to be cut, like LUA Scripting, making tools for the engine, and some utility features that I had previously planned. Obviously, all that can come later as “add-ons”, LUA Scripting is something that I’m very adamant about having in this game engine.All of that might also mean that I have to postpone, or even forget about, the idea of having Vulkan and DirectX as rendering backends for the engine. A 2D game engine doesn’t really need anything more than OpenGL, heck, using OpenGL ES would be just fine, that’s also a possibility that I’m studying. The only issue here is that OpenGL is bound to be deprecated, and someday it might just be gone.Another piece of the equation is that gueepo2D was trying to be too generic, and I want to make it tailored more towards the types of games I want to make, so I have to ask myself: “What types of games do I want to make?”And, honestly, I don’t really know. All I can think of is that I want to do story-driven games, but that can be a platformer, that can a turn-based RPG, that can be anything. So, currently, the only restriction I’m putting on it is that these games are going to be 2D, pixel-art, and tile-based.I have a lot of design and mechanics somewhere on Notion, and none of them motivates me too much, but I have 2 or 3 projects on the “shelf” where it started with a story, and they motivate me way more. It is harder to find a mechanic and a game loop that might work with it, but I feel like the end result is more gratifying.Another big thing that has to change is that I have to remove the sandbox project from the engine itself. Currently, every time you create a new project with the game engine the sandbox project will be right there, not doing anything. Ideally, I should move the sandbox into its own repository, and that’s helpful because it can act as a sample project as well!Basically, here are some actionable steps.  Remove the “sandbox” project from the engine itself, move it into its own repository.  Remove the ECS from the engine. Work on a “gueepo2D-ecs” addon in the future, but ideally this should be left for the user to impement.  Maybe remove the event system? I’m not sure about its usage and necessity currently, and I usually lean more towards removing something if I don’t see a use for it, if the necessity comes, I can just look at old commits and add it back.  Think of the engine more as the interaction between these 5 modules: application, renderer, input, audio and math. Of course, there are going to be a lot of “common” code to support all of these, like string and vector containers, debug code (profiling and checking for memory leaks), the resource manager, the filesystem, ImGui, etc…But all in all, that’s about it. I’ve written this mostly to get these ideas out of my head, I might do a YouTube video talking about all these after I started making some of these changes.twitteryoutube",
            "content_html": "<p>In case you are here by accident or some other reason, I am currently developing a simple 2D game engine in C++, you can find it on <a href=\"https://github.com/guilhermepo2/gueepo2D\">github</a> - even it’s been enough time, maybe you can even make a game with it now!</p><hr /><p>Last month I embarked in a journey of rendering fonts on my 2D game engine, it was fun, it was a lot of work, but eventually I’ve made it. And then I didn’t do any work on the engine for way more than a month.</p><p>In my defense, I moved to the other side of the United States, I have been working some overtime lately, and I’ve traveled to Brazil, the last 8 weeks or so were hectic.</p><p><img src=\"https://gueepo.me/images/gueepo2D_2.png\" alt=\"last gueepo2D commit\" /></p><p>And every time I stay away too much from a project I start having a lot of second thoughts about it. Is this game engine any good? Does it have a future? What am I trying to do? Where am I trying to go?</p><p>And I promised myself I wouldn’t start a new game engine, and honestly, starting another game engine right now wouldn’t solve anything, but after thinking a lot about it, I am fairly convinced that gueepo2D needs a redesign and some restructuring.</p><p>The first question to answer when approaching this redesign is: “What are my goals with gueepo2D?”, “What do I want gueepo2D to be?”</p><p>I’ve looked around at some other game-making libraries, and the ones that I like the most are libGDX and MonoGame. These are basically simple frameworks that contains a renderer, input handling, a math library, audio, and an application framework providing a window and your typical game engine-like messaging systems, like Begin, Update, Render, etc…</p><p>And I think a realistic goal is to have gueepo2D be something on those lines, but in C++. One of my goals was always for it to be beginner friendly, a place where you can actually make and ship games, but a place where you can also learn game development and/or C++.</p><p>Right off the bat, the current state of gueepo2D is that it was trying to be way more than that, after reviewing some of the modules there are two that immediately stand out that could be totally removed:</p><ol>  <li>The entity-component system;</li>  <li>The event system.</li></ol><p>The event system is a way to abstract application events, like when a window close, when it is resized, input events, things like that. I can imagine a world where this is needed in case I decide to run the engine both on SDL2 and to have a native Windows… Window… But worst case scenario, I can just add it back if it’s needed.</p><p>The entity-component system is more of an interesting problem. It is a fairly important feature when making a game, but, honestly, the current ECS on gueepo2D is average at best, it abuses the usage of C++ templates, which I highly dislike, and even then, it’s quite hard to customize and navigate around. I’m leaning more towards not having ECS as part of the engine, and leave it up to the user. What I will probably end up doing is having a “gueepo2D-ecs” that will work sort of as an “add-on” to the engine.</p><p>This also means that some features might to be cut, like LUA Scripting, making tools for the engine, and some utility features that I had previously planned. Obviously, all that can come later as “add-ons”, LUA Scripting is something that I’m very adamant about having in this game engine.</p><p>All of that might also mean that I have to postpone, or even forget about, the idea of having Vulkan and DirectX as rendering backends for the engine. A 2D game engine doesn’t really need anything more than OpenGL, heck, using OpenGL ES would be just fine, that’s also a possibility that I’m studying. The only issue here is that OpenGL is bound to be deprecated, and someday it might just be gone.</p><hr /><p>Another piece of the equation is that gueepo2D was trying to be too generic, and I want to make it tailored more towards the types of games I want to make, so I have to ask myself: “What types of games do I want to make?”</p><p>And, honestly, I don’t really know. All I can think of is that I want to do story-driven games, but that can be a platformer, that can a turn-based RPG, that can be anything. So, currently, the only restriction I’m putting on it is that these games are going to be 2D, pixel-art, and tile-based.</p><p>I have a lot of design and mechanics somewhere on Notion, and none of them motivates me too much, but I have 2 or 3 projects on the “shelf” where it started with a story, and they motivate me way more. It is harder to find a mechanic and a game loop that might work with it, but I feel like the end result is more gratifying.</p><p>Another big thing that has to change is that I have to remove the sandbox project from the engine itself. Currently, every time you create a new project with the game engine the sandbox project will be right there, not doing anything. Ideally, I should move the sandbox into its own repository, and that’s helpful because it can act as a sample project as well!</p><hr /><p>Basically, here are some actionable steps.</p><ol>  <li>Remove the “sandbox” project from the engine itself, move it into its own repository.</li>  <li>Remove the ECS from the engine. Work on a “gueepo2D-ecs” addon in the future, but ideally this should be left for the user to impement.</li>  <li>Maybe remove the event system? I’m not sure about its usage and necessity currently, and I usually lean more towards removing something if I don’t see a use for it, if the necessity comes, I can just look at old commits and add it back.</li>  <li>Think of the engine more as the interaction between these 5 modules: application, renderer, input, audio and math. Of course, there are going to be a lot of “common” code to support all of these, like string and vector containers, debug code (profiling and checking for memory leaks), the resource manager, the filesystem, ImGui, etc…</li></ol><p>But all in all, that’s about it. I’ve written this mostly to get these ideas out of my head, I might do a YouTube video talking about all these after I started making some of these changes.</p><p><br /><a href=\"http://twitter.com/guilhermepo2\">twitter</a><br /><a href=\"https://www.youtube.com/channel/UCOIlr-LtVmaIRdI0oe2lthg\">youtube</a></p>",
            "url": "https://gueepo.me/2022/07/14/state-of-gueepo2d",
            "image": "/images/gueepo2D.png",
            
            
            
            
            "date_published": "2022-07-14T10:00:00+02:00",
            "date_modified": "2022-07-14T10:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2022/06/03/may-2022",
            "title": "the YouTube channel overhaul - may update",
            "summary": null,
            "content_text": "last month I talked about how I wanted my YouTube channel to be a “show”, and I still want that, but this month has been a big struggle as to understanding exactly what that even mean.I had this idea of making a windows game engine based on the book Game Coding Complete, Fourth Edition. the first video was almost ready. I was feeling something was off and I was unsatisfied, but I couldn’t really point my finger on the reason why.so I had to sit down and reflect. what would it mean to make a show out of me making an engine based on a book?so I noticed the whole thing wasn’t going to work out, my feelings about the book are mixed, I think I just had the wrong expectations about it. it’s definitely not a “code along” book, it’s not even a book to read and make a game engine, it’s more of a reference, just like “Game Engine Architecture” by Jason Gregory.But why would you need anything else like Game Engine Architecture by Jason Gregory when you have Game Engine Architecture by Jason Gregory?I will keep the book around and use it just like I use Game Engine Architecture by Jason Gregory. when doing something on my engine, I often start by looking at what Jason Gregory has to say about the topic.but anyway.that left me in a weird position, I hadn’t posted for almost 2 weeks, and the next video was almost ready, but I had to scratch that out and start working on something else, which means the YouTube channel would have a big hole.I decided I don’t really care?I think I’m heading on a path that I really want to be. I like to believe I have some good video ideas, and I think I have some cool things to make and show on a video, so I think overall it’s a positive.but that is also to say that now my channel is pretty much about my game engine and the things I make with it.I spent almost a year slowly doing this engine and exploring a lot of learning resources, reading a lot, and when I came to myself I noticed that I had the path and the tools to just push forward and start cranking things into my engine. it won’t be perfect, a lot of things are going to be rewritten, but I am very excited about the vision I have in my mind (and on Notion) for my game engine.the videoso all of this led me into having only one video to show for this monthly update, which I think is fine? one video a month sounds like a good goal to have since making videos is a part-part-time thing for me.I don’t hate this video. I like and hate the green screen at the same time. But overall, the things I don’t like are mostly because I didn’t write and plan the video well enough, fully writing the videos and thinking of them as a short story and/or a short film seems to be what works best for me, that means a lot of work before even hitting the “record” button, but I like the idea of my videos being heavier on writing/storyboarding.this video led me into this weird rabbit hole where I started making a simple shmup, but then I went on a tangent of asking myself: “How can I change the texture class into being able to create textures from code?”and THAT tangent led me into making a pixel simulation thing using cellular automata, and with the power of being able to create a texture and say “HEY, PUT THIS COLOR ON THIS PIXEL” my mind goes to a lot of places.I could make a rasterizer, GUEEPO DOOM!I could make a 3D software renderer, GUEEPO 3D RENDERER!wait, I’m already doing that, that’s my side side-project.all of this created this weird situation where I’m sitting here now thinking about this blog post, three different projects and multiple different video scripts.I recently just found out that the ability of creating textures from code will also come in handy when reading/rendering fonts on the engine, which is what I’m currently workin on. So at least I have that going for me.random reflectionsbidiodgmaesI’m playing Final Fantasy X (it’s very good) and I have played some Noita, mostly because of the whole pixel simulation thing.I had some hyperfocused days on Noita and watched a bunch of videos about the tech behind it, and it’s nothing short of brilliant, I don’t really aim to make a game where every pixel is simulated (yet), but I think the tech and the knowledge are very useful and, most importantly, looks really good.my current idea is to use these as tools to make cool particle effects and visual effects on pixel-art games, not anything gameplay-related, but it can definitely add a flair.liferecently I started the process of packing my things because I will be moving! I’m leaving Florida (thank god (praying hands emoji)) and it’s an annoying process, hopefully I just throw away everything and that will make things easier.I’ve been up in New York recently, and might have indulged too much into the act of mindlessly walking through Central Park while listening to JPEGMAFIA, whoops. With THAT being said, I love walkable cities with good public transportation. I pity the average “just one more lane” “car-as-default” ameribrain.gaem dwsingI usually don’t really do design but recently I asked myself: what if I did? so some ideas I had went from being a bullet list on a notes app somewhere in my cellphone into being an actual document on Notion. and suddenly I have 3 documents that I actually like and think they are a good idea? that took a turn.who would have thought that sitting down to flesh out some ideas and asking yourself important questions would actually propel a design forward?!in a way, the more I sit down and write these documents, more they start taking their own political form, which is funny, not even the chill fishing game can escape the fate of “now this is a political game” - is there any game that is not political? (maybe)now I may go back to sleep and work on rendering text on my game engine.twitteryoutube",
            "content_html": "<p>last month I talked about how I wanted my YouTube channel to be a “show”, and I still want that, but this month has been a big struggle as to understanding exactly what that even mean.</p><p>I had this idea of making a windows game engine based on the book Game Coding Complete, Fourth Edition. the first video was almost ready. I was feeling something was off and I was unsatisfied, but I couldn’t really point my finger on the reason why.</p><p>so I had to sit down and reflect. what would it mean to make a show out of me making an engine based on a book?</p><p>so I noticed the whole thing wasn’t going to work out, my feelings about the book are mixed, I think I just had the wrong expectations about it. it’s definitely not a “code along” book, it’s not even a book to read and make a game engine, it’s more of a reference, just like “Game Engine Architecture” by Jason Gregory.</p><p>But why would you need anything else <em>like</em> Game Engine Architecture by Jason Gregory when you have Game Engine Architecture by Jason Gregory?</p><p>I will keep the book around and use it just like I use Game Engine Architecture by Jason Gregory. when doing something on my engine, I often start by looking at what Jason Gregory has to say about the topic.</p><p>but anyway.</p><p>that left me in a weird position, I hadn’t posted for almost 2 weeks, and the next video was almost ready, but I had to scratch that out and start working on something else, which means the YouTube channel would have a big hole.</p><p>I decided I don’t really care?</p><p>I think I’m heading on a path that I really want to be. I like to believe I have some good video ideas, and I think I have some cool things to make and show on a video, so I think overall it’s a positive.</p><p>but that is also to say that now my channel is pretty much about my game engine and the things I make with it.</p><p>I spent almost a year slowly doing this engine and exploring a lot of learning resources, reading a lot, and when I came to myself I noticed that I had the path and the tools to just push forward and start cranking things into my engine. it won’t be perfect, a lot of things are going to be rewritten, but I am very excited about the vision I have in my mind (and on Notion) for my game engine.</p><hr /><p>the video</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4UKnxpoAIas\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><br /></p><p>so all of this led me into having only one video to show for this monthly update, which I think is fine? one video a month sounds like a good goal to have since making videos is a part-part-time thing for me.</p><p>I don’t <em>hate</em> this video. I like and hate the green screen at the same time. But overall, the things I don’t like are mostly because I didn’t write and plan the video well enough, fully writing the videos and thinking of them as a short story and/or a short film seems to be what works best for me, that means a lot of work before even hitting the “record” button, but I like the idea of my videos being heavier on writing/storyboarding.</p><p>this video led me into this weird rabbit hole where I started making a simple shmup, but then I went on a tangent of asking myself: “How can I change the texture class into being able to create textures from code?”</p><p>and THAT tangent led me into making a pixel simulation thing using cellular automata, and with the power of being able to create a texture and say “HEY, PUT THIS COLOR ON THIS PIXEL” my mind goes to a lot of places.</p><p>I could make a rasterizer, GUEEPO DOOM!</p><p>I could make a 3D software renderer, GUEEPO 3D RENDERER!</p><p>wait, I’m already doing that, that’s my side side-project.</p><p>all of this created this weird situation where I’m sitting here now thinking about this blog post, three different projects and multiple different video scripts.</p><p>I recently just found out that the ability of creating textures from code will also come in handy when reading/rendering fonts on the engine, which is what I’m currently workin on. So at least I have that going for me.</p><hr /><p>random reflections</p><p><strong>bidiodgmaes</strong></p><p>I’m playing Final Fantasy X (it’s very good) and I have played some Noita, mostly because of the whole pixel simulation thing.</p><p>I had some hyperfocused days on Noita and watched a bunch of videos about the tech behind it, and it’s nothing short of brilliant, I don’t really aim to make a game where every pixel is simulated (yet), but I think the tech and the knowledge are very useful and, most importantly, looks really good.</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/prXuyMCgbTc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VLZjd_Y1gJ8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><br /></p><p>my current idea is to use these as tools to make cool particle effects and visual effects on pixel-art games, not anything gameplay-related, but it can definitely add a flair.</p><p><strong>life</strong></p><p>recently I started the process of packing my things because I will be moving! I’m leaving Florida (thank god (praying hands emoji)) and it’s an annoying process, hopefully I just throw away everything and <em>that</em> will make things easier.</p><p>I’ve been up in New York recently, and might have indulged too much into the act of mindlessly walking through Central Park while listening to JPEGMAFIA, whoops. With THAT being said, I love walkable cities with good public transportation. I pity the average “just one more lane” “car-as-default” ameribrain.</p><p><strong>gaem dwsing</strong></p><p>I usually don’t really <em>do design</em> but recently I asked myself: what if I did? so some ideas I had went from being a bullet list on a notes app somewhere in my cellphone into being an actual document on Notion. and suddenly I have 3 documents that I actually like and think they are a good idea? that took a turn.</p><p>who would have thought that sitting down to flesh out some ideas and asking yourself important questions would actually propel a design forward?!</p><p>in a way, the more I sit down and write these documents, more they start taking their own political form, which is funny, not even the chill fishing game can escape the fate of “now this is a political game” - is there any game that is not political? (<em>maybe</em>)</p><p>now I may go back to sleep and work on rendering text on my game engine.</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2CGFU1lBdCI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><br /><a href=\"http://twitter.com/guilhermepo2\">twitter</a><br /><a href=\"https://www.youtube.com/channel/UCOIlr-LtVmaIRdI0oe2lthg\">youtube</a></p>",
            "url": "https://gueepo.me/2022/06/03/may-2022",
            "image": "/images/ytb/ytbupdates.png",
            
            
            
            
            "date_published": "2022-06-03T10:00:00+02:00",
            "date_modified": "2022-06-03T10:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2022/05/01/april-2022",
            "title": "April? You mean the Fourth Month?",
            "summary": null,
            "content_text": "WOW, this month lasted forever, dude. Is it 2023 ALREADY? As I draft this writing throughout the days of the weirdly long month of April, I notice that it gets WORST at each iteration.I finally merged ALL of my BLOGS (I had three) so if you click on my name up there you can see all my links, as well as see all my other blog posts!But it doesn’t matter, the purpose of this post is to talk about my monthly progress on doing YOUTUBE things, and whichever tangents might arise as a consequence of that.the renderer videoI made a video about adding a renderer to my 2D game engine, it was awful.I will, at least twice per day, questions myself whether or not I should have released this video. What you see up there is the result of me having an idea and noticing way too late that it is, in fact, a bad idea. Being more specific, I noticed it was a bad idea on the editing part of the thing, which is The Last Step.So the dilemma was: forget about this, or do something, anything, and put it out there. I opted for putting something out there. I think there is some value, and I had fun making the intro and the other bit in the middle of the video. But that’s about it.Making a renderer is a process that is very complex and very difficult to capture in words, and I should have noticed that and never done this video.Anyway, too late now.the tilemaps videoThis one is actually pretty OK. I liked it. I actually want to talk less on the videos and have more interesting shots. So I have to practice getting my point across in a more concise and fluid way, sounds easier than it is, especially considering I’m bad at speaking and English is my second language.I think sometimes I ramble and use too many words, that makes the video longer, which makes it more boring, but also makes it more confusing and harder to get the point, so it’s a lose-lose situation.But anyway, this video is a huge step towards the format I actually want to use in these videos. And I think the next one will be another huge step towards it. I thought it would be ready for this update, but it isn’t, what a shame.Which leads me to the this next topic!the future of the YouTube channelI have really been thinking a lot about WHAT my YouTube channel is, WHAT I want to show, HOW I want to show, and most importantly, WHY?I’m currently setting on the idea that my YouTube channel should be, in fact, a “show”, you know, like Seinfield or something like that, except that I’m not a comedian, nor funny, nor know how to write. I’m not a film director either, I’m just some dude so there’s definitely a struggle going on here on how to make things interesting and relevant.But I don’t think I’m an empty bottle of content.Obviously, it’s all a huge learning process, my YouTube videos are cringe, and I’m not afraid of being made fun of, I’m learning, and hopefully I learn something while making videos, hopefully I get better at it, and hopefully in the future they are ok enough so that a considerable amount of people watch it, learn something with it, and have fun.I like to believe that I’m an OK Programmer, I learned a lot and I like to think I have, actually, a good grasp on the process of making something through the means of furiously typing in turing-complete languages on a text editor, and giving it to a compiler that will spit an .exe file. And I hope that by portraying the process, and through some creativity and filmmaking tricks I can show people how going through the process is and how it feels, and then hopefully people will learn something with it.All that is to say that, I want to be entertaining, but I also want the viewer to leave the videos with new knowledge. And I don’t mean “this is how you write lines of code in C++” knowledge, I mean “so this is how a week long process of adding a feature in a game engine looks like and its ups and downs” knowledge.But anyway, every show has seasons. And I have been thinking how the YouTube channel can have multiple seasons. I am really liking the idea of making devlogs, and I want to see how it will turn out.The Current Season would be making this game engine in DirectX, I’m calling it gueepoDX.And I actually already have a list for possible future seasons. I could learn 6502 Assembly, make a game for the Game Boy Advance, make a 3D renderer, make a game On My Own Engine, making a small game framework in C# or Rust, there’s a lot of options!Anyway, I’m just speculating and speaking my mind here, I don’t even know what’s going to happen.life stuffsocial mediaI deleted Twitter, Instagram, TikTok, YouTube, Twitch, YouTube Studio, Netflix, Skillshare, and Udemy from my cellphone. Next step is using less of Twitter, and Instagram on The Computer.UPDATE: I downloaded Tweetbot for iOS and stopped using Twitter on The Computer. It’s better this way.I wasn’t really feeling depressed or like social media was taking a good chunk of my oh precious time, but I do feel a lot better anyways, turns out life is better when we are not frying our brains?It also helps me to be more mindful of time, so it’s good, it’s been great, actually.television  watched Blade Runner 2049 (it owns)  watched Better Call Saul Season 5 (it owns)  watching Cowboy Bebop (it owns)  watching Better Call Saul Season 6 (it really owns)b00ksMy goal is to read 12 books in the year of Twenty Twenty Two, this means that by the end of April I had to have read 4 books, I’m well beyond that. But I feel like I want to ramp up, reading is good, actually. Who would have thought?!This month I finished reading “A People’s Guide to Capitalism”, and now I’m reading Neuromancer, which I’m like 60% through it.My next 4 books on my reading list are Sci-Fi so that’s going to be a wild ride. But today I was searching some books and I found interesting books about math and philosophy. Whatever I read next, it’s for sure going to be a wild ride.bideo gamesI got a Steam Deck!Now I can play my two monthly hours of videogames on the go! With that, I pretty much deleted all games I have on my computer, except Final Fantasy XIV and Hearthstone (that I barely play but my younger self won’t let me delete because what if I want to go back to it?!).I’m also coming to terms with the idea that I don’t really like videogames. That’s probably a stronger reason for why I’m deleting them from my computer.In theory I love it, I like the idea of an interactive, visual, and auditory media, everything is there, put in a good story, dramatic music, some nice graphics and give the person interacting with the thing some agency, sounds METAL, what there isn’t to like about it?Although in theory I love videogames, in practice… Not So Much? Every now and then I will get really into a game, like when I played Final Fantasy VIII last year and now I’m going through Final Fantasy X with the same feeling of marvel.If I were to pinpoint reasons why I don’t like videogames that much in practice, it would be a 5000 words essay about Culture and Capitalism (C&amp;C), let’s not do that.As a side note, why even improve game graphics when videogame graphics peaked here??and here??baitwitteryoutube",
            "content_html": "<p>WOW, this month lasted forever, dude. Is it 2023 <em>ALREADY</em>? As I draft this writing throughout the days of the weirdly long month of April, I notice that it gets WORST at each iteration.</p><p>I finally merged <strong>ALL</strong> of my BLOGS (I had three) so if you click on my name up there you can see all my <em>links</em>, as well as see all my other blog posts!</p><p>But it doesn’t matter, the purpose of this post is to talk about my monthly progress on doing <strong>YOUTUBE</strong> things, and whichever tangents might arise as a consequence of that.</p><h3 id=\"the-renderer-video\"><strong>the renderer video</strong></h3><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4Pz48apuYIM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p>I made a video about adding a renderer to my 2D game engine, it was awful.</p><p>I will, at least twice per day, questions myself whether or not I should have released this video. What you see up there is the result of me having an idea and noticing way too late that it is, in fact, a bad idea. Being more specific, I noticed it was a bad idea on the editing part of the thing, which is The Last Step.</p><p>So the dilemma was: forget about this, or do something, <em>anything</em>, and put it out there. I opted for putting something out there. I think there is some value, and I had fun making the intro and the other bit in the middle of the video. But that’s about it.</p><p>Making a renderer is a process that is very complex and very difficult to capture in words, and I should have noticed that and never done this video.</p><p>Anyway, too late now.</p><h3 id=\"the-tilemaps-video\"><strong>the tilemaps video</strong></h3><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UDorJUuRI2o\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p>This one is actually pretty OK. I liked it. I actually want to talk less on the videos and have more interesting shots. So I have to practice getting my point across in a more concise and fluid way, sounds easier than it is, especially considering I’m bad at speaking and English is my second language.</p><p>I think sometimes I ramble and use too many words, that makes the video longer, which makes it more boring, but also makes it more confusing and harder to get the point, so it’s a lose-lose situation.</p><p>But anyway, this video is a huge step towards the format I actually want to use in these videos. And I think the next one will be another huge step towards it. I thought it would be ready for this update, but it isn’t, what a shame.</p><p>Which leads me to the this next topic!</p><h3 id=\"the-future-of-the-youtube-channel\">the future of the YouTube channel</h3><p>I have really been thinking a lot about <strong>WHAT</strong> my YouTube channel is, <strong>WHAT</strong> I want to show, <strong>HOW</strong> I want to show, and most importantly, <strong>WHY</strong>?</p><p>I’m currently setting on the idea that my YouTube channel should be, in fact, a “<em>show</em>”, you know, like Seinfield or something like that, except that I’m not a comedian, nor funny, nor know how to write. I’m not a film director either, I’m just <strong>some dude</strong> so there’s definitely a struggle going on here on how to make things interesting and relevant.</p><p>But I don’t think I’m an empty bottle of <strong>content</strong>.</p><p>Obviously, it’s all a huge learning process, my YouTube videos <strong>are</strong> cringe, and I’m not afraid of being made fun of, I’m learning, and hopefully I learn something while making videos, hopefully I get better at it, and hopefully in the future they are <em>ok enough</em> so that a considerable amount of people watch it, learn something with it, and have fun.</p><p>I like to believe that I’m an <em>OK Programmer</em>, I learned a lot and I like to think I have, actually, a good grasp on the process of making <em>something</em> through the means of furiously typing in turing-complete languages on a text editor, and giving it to a compiler that will spit an .exe file. And I hope that by portraying the process, and through some creativity and filmmaking tricks I can show people how going through the process is and how it feels, and <strong>then</strong> hopefully people will learn something with it.</p><p>All that is to say that, I want to be entertaining, but I also want the <strong>viewer</strong> to leave the videos with new knowledge. And I don’t mean “this is how you write lines of code in C++” knowledge, I mean “so this is how a week long process of adding a feature in a game engine looks like and its ups and downs” knowledge.</p><hr /><p>But anyway, every <em>show</em> has <em>seasons</em>. And I have been thinking how the YouTube channel can have multiple seasons. I am really liking the idea of making devlogs, and I want to see how it will turn out.</p><p>The <em>Current Season</em> would be making this game engine in DirectX, I’m calling it <strong>gueepoDX</strong>.</p><p>And I actually already have a list for possible future seasons. I could learn 6502 Assembly, make a game for the Game Boy Advance, make a 3D renderer, make a game On My Own Engine, making a small game framework in C# or Rust, there’s a lot of options!</p><p>Anyway, I’m just speculating and speaking my mind here, I don’t even know what’s going to happen.</p><p><img src=\"https://gueepo.me/images/ytb/gameenginesrealshit.png\" alt=\"making game engines is the real shit\" /></p><h1 id=\"life-stuff\">life stuff</h1><p><strong>social media</strong>I deleted Twitter, Instagram, TikTok, YouTube, Twitch, YouTube Studio, Netflix, Skillshare, and Udemy from my cellphone. Next step is using less of Twitter, and Instagram on The Computer.</p><p><strong>UPDATE: I downloaded Tweetbot for iOS and stopped using Twitter on The Computer. It’s better this way.</strong></p><p>I wasn’t really feeling depressed or like social media was taking a good chunk of my <em>oh precious time</em>, but I do feel a lot better anyways, turns out life is better when we are not frying our brains?</p><p>It also helps me to be more mindful of time, so it’s good, it’s been great, actually.</p><p><strong>television</strong></p><ul>  <li>watched Blade Runner 2049 (it owns)</li>  <li>watched Better Call Saul Season 5 (it owns)</li>  <li>watching Cowboy Bebop (it owns)</li>  <li>watching Better Call Saul Season 6 (it <em>really</em> owns)</li></ul><p><strong>b00ks</strong></p><p>My goal is to read 12 books in the year of Twenty Twenty Two, this means that by the end of April I had to have read 4 books, I’m well beyond that. But I feel like I want to ramp up, reading is good, actually. Who would have thought?!</p><p>This month I finished reading “A People’s Guide to Capitalism”, and now I’m reading Neuromancer, which I’m like 60% through it.</p><p>My next 4 books on my reading list are Sci-Fi so that’s going to be a wild ride. But today I was searching some books and I found interesting books about <em>math</em> and <em>philosophy</em>. Whatever I read next, it’s for sure going to be a <strong>wild ride</strong>.</p><p><strong><em>bideo games</em></strong></p><p>I got a Steam Deck!</p><p><img src=\"https://gueepo.me/images/ytb/steamdeck_hades.png\" alt=\"a steam deck playing hades\" /></p><p>Now I can play my two monthly hours of videogames on the go! With that, I pretty much deleted all games I have on my computer, except <em>Final Fantasy XIV</em> and <em>Hearthstone</em> (that I barely play but my younger self won’t let me delete because what if I want to go back to it?!).</p><p>I’m also coming to terms with the idea that I don’t <strong>really</strong> like videogames. That’s probably a stronger reason for <em>why</em> I’m deleting them from my computer.</p><p>In theory I love it, I like the idea of an interactive, visual, and auditory media, everything is there, put in a good story, dramatic music, some nice graphics and give the person interacting with the thing some agency, sounds <strong>METAL</strong>, what there isn’t to like about it?</p><p>Although <em>in theory</em> I love videogames, in practice… Not So Much? Every now and then I will get really into a game, like when I played <em>Final Fantasy VIII</em> last year and now I’m going through <em>Final Fantasy X</em> with the same feeling of marvel.</p><p>If I were to pinpoint reasons why I don’t like videogames that much in practice, it would be a 5000 words essay about Culture and Capitalism (C&amp;C), let’s not do that.</p><p>As a side note, why even improve game graphics when videogame graphics peaked here??</p><p><img src=\"https://gueepo.me/images/ytb/xenogears.png\" alt=\"xenogears\" /></p><p>and here??</p><p><img src=\"https://gueepo.me/images/ytb/windwaker.png\" alt=\"windwaker\" /></p><p>bai</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CnzlOlOVJ9g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><br /><a href=\"http://twitter.com/guilhermepo2\">twitter</a><br /><a href=\"https://www.youtube.com/channel/UCOIlr-LtVmaIRdI0oe2lthg\">youtube</a></p>",
            "url": "https://gueepo.me/2022/05/01/april-2022",
            "image": "/images/ytb/ytbupdates.png",
            
            
            
            
            "date_published": "2022-05-01T16:00:00+02:00",
            "date_modified": "2022-05-01T16:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2022/05/01/smart-pointers-cpp",
            "title": "smart pointers in C++",
            "summary": null,
            "content_text": "It was on my list for a long time, and now I’ll finally take a look at smart pointers, how they work, and how to better use them. And, as always, I will write about them.There’s a lot of reasons to use C/C++ and using pointers is probably among the most common reasons why people use it. Figure this, you have the power to decide when you get memory from the computer, and it’s only fair that you also have the responsibility of giving it back.Sounds fair, sounds powerful, you take it, you give it back, it’s all under your control! There’s no garbage-collection here, leave this to slow languages like C# and Java.And then C++11 comes in with… limited garbage-collection and smart pointers! Now you don’t need to worry (too much) about giving the memory back. Hmm.I guess garbage collection isn’t that bad then?C++11 introduced the &lt;memory&gt; header responsible for “defining general utilities to manage dynamic memory” thanks cpp dot comThere are three types of smart pointers:  shared pointer  a weak shared pointer  a unique pointerA std::unique_ptr owns their pointer uniquely, meaning no one else can point to that data.For the purpose of an example, suppose you have this complex class right here:class vec2 {    public:    float x, y;        vec2() { std::cout &lt;&lt; \"vec2 created\\n\"; }    ~vec2() { std::cout &lt;&lt; \"vec2 destroyed\\n\"; }};The following programint main() {    vec2 v;    return 0;}Would result in the lines “vec2 created”, followed by “vec2 destroyed”. But what happens if you have a pointer and you forget deallocate it?vec2* v = new vec2();Running this program would output just “vec2 created” - You allocated memory and never gave it back, your code has a memory leak, congrats!That’s where we go back to smart pointers, if they are as smart as they say they are, we shouldn’t have a memory leak, right?std::unique_ptr&lt;vec2&gt; v(new vec2());As expected, with this we see both the creation and destruction messages printed. If you are on C++14 you can make something like this.std::unique_ptr&lt;vec2&gt; v = std::make_unique&lt;vec2&gt;();And now if a program like this, you will see the creation and destruction messages three times, once for each pointer.int main() {    std::unique_ptr&lt;vec2&gt; v = std::make_unique&lt;vec2&gt;();    std::shared_ptr&lt;vec2&gt; v2 = std::make_shared&lt;vec2&gt;();    std::weak_ptr&lt;vec2&gt; v3 = std::make_shared&lt;vec2&gt;();        return 0;}Going back to our raw pointer example, how could we fix it? The below is perfectly possible!vec2* v = new vec2();std::shared_ptr&lt;vec2&gt; sharedV(v);We create the raw pointer ourselves and then give it to a smart pointer, that will get rid of it for us, that’s doable.Cool, we learned that when smart pointers go out of scope they destroy the object automatically, making our lifes easier when managing memory, but what about their particularities?A std::unique_ptr, as the name implies, is unique. Once a unique pointer owns that pointer, no one else can. For example, this is illegal C++.std::unique_ptr&lt;vec2&gt; v = std::make_unique&lt;vec2&gt;();std::unique_ptr&lt;vec2&gt; thisIsIllegal = v;And as the name std::shared_ptr implies, this is a shared pointer. The following is perfectly legal in C++.std::shared_ptr&lt;vec2&gt; v = std::make_shared&lt;vec2&gt;();std::shared_ptr&lt;vec2&gt; notIllegal = v;But here’s a trick question: How smart are these unique pointers, do they have any control over raw pointers? What will happen here?vec2* position = new vec2();std::unique_ptr&lt;vec2&gt; v(position);std::unique_ptr&lt;vec2&gt; legalOrIllegal(position);We don’t get a compilation error. But we do get a crash. That’s not surprising since you are destroying the same thing twice. The compiler won’t magically know that a raw pointer is referenced by a smart pointer.The thing here is that even if you are using smart pointers you have to be a little careful. And if you are on C++14 then, by all means, use std::make_unique&lt;T&gt; or std::make_shared&lt;T&gt;The difference between a shared and an unique pointer is pretty clear, but what about weak shared pointers? std::weak_ptrFrom cppreference: “std::weak_ptr is a smart pointer that holds a non-owning (“weak”) reference to an object that is managed by std::shared_ptr”So a weak pointer has a reference but doesn’t own the thing. What does that mean? It basically means that you can reference it, but you didn’t allocate and, therefore, you can’t really destroy it.In more technical terms, all of this works by, behind the curtains, keeping track of how many references a pointer has. So a weak reference has no effect on the reference counting.I think the right word here is observer, a weak pointer can observe what a shared pointer holds.Fancy this example.In a game engine, it is common to have an entity-component system, and it’s common that the entity will have a reference to a component, and the component will have a reference to its owner entity.class entity;class component;class component {public:    std::shared_ptr&lt;entity&gt; ownerEntity;        component() { std::cout &lt;&lt; \"component created\\n\"; }    ~component() { std::cout &lt;&lt; \"component destroyed\\n\"; }};class entity {public:    std::shared_ptr&lt;component&gt; childrenComponent;        entity() { std::cout &lt;&lt; \"entity created\\n\"; }    ~entity() { std::cout &lt;&lt; \"entity destroyed\\n\"; }};Makes, sense, right?int main() {    std::shared_ptr&lt;entity&gt; e(new entity());    return 0;}This will gives us the messages “entity created” followed by “entity destroyed”int main() {    std::shared_ptr&lt;component&gt; c(new component());    return 0;}This will gives us the messages “component created” followed by “component destroyed”Makes sense, right?So if we do thisint main() {    std::shared_ptr&lt;entity&gt; e(new entity());    std::shared_ptr&lt;component&gt; c(new component());        e-&gt;childrenComponent = c;    c-&gt;ownerEntity = e;    return 0;}We get… “entity created” and “component created”, and that’s all. Nothing is being destroyed. But “Hey!”, you might say, “I thought these smart pointers were smart!”Nothing is smart enough to contain the stupidity of us, the programmers :)What is happening here is that the entity is referenced by the component and the component is referenced by the entity. Whoah, circular dependencies! (Thanks to this blog post here that helped me make a bit more sense of all this)So when the scope of the main function is over, and we try to destroy the component, the entity is still referencing them, so we can’t delete it. The same happens if we try to destroy the entity first.The solution here is simple, one of these two pointers has to be a weak pointer, so we get rid of this circular dependency. And I think it makes more sense to make the pointer on the component a weak pointer.Here’s the new component classclass component {public:    std::weak_ptr&lt;entity&gt; ownerEntity;        component() { std::cout &lt;&lt; \"component created\\n\"; }    ~component() { std::cout &lt;&lt; \"component destroyed\\n\"; }};And then, if you run the same program again, it works correctly! both entity and component are created and destroyed. Because the weak pointer doesn’t own a reference to the entity, it is not taken in consideration when counting references.So when the entity pointer of the main function goes out of scope, it can be destroyed, because we don’t care about the reference from the weak pointer!Wow! that was a big meditation.twitteryoutube",
            "content_html": "<p>It was on my list for a long time, and now I’ll finally take a look at smart pointers, how they work, and how to better use them. And, as always, I will write about them.</p><p>There’s a lot of reasons to use C/C++ and using pointers is probably among the most common reasons why people use it. Figure this, you have the power to decide when you get memory from the computer, and it’s only fair that you also have the responsibility of giving it back.</p><p>Sounds fair, sounds powerful, you take it, you give it back, it’s all under your control! There’s no garbage-collection here, leave this to <em>slow</em> languages like C# and Java.</p><p>And then C++11 comes in with… limited <em>garbage-collection</em> and <strong>smart pointers</strong>! Now you don’t need to worry <em>(too much)</em> about giving the memory back. Hmm.</p><p>I guess garbage collection isn’t that bad then?</p><p>C++11 introduced the <code class=\"language-plaintext highlighter-rouge\">&lt;memory&gt;</code> header responsible for <em>“defining general utilities to manage dynamic memory”</em> <a href=\"https://www.cplusplus.com/reference/memory/\">thanks cpp dot com</a></p><p>There are three types of smart pointers:</p><ul>  <li>shared pointer</li>  <li>a <em>weak</em> shared pointer</li>  <li>a <em>unique</em> pointer</li></ul><p>A <a href=\"https://www.cplusplus.com/reference/memory/unique_ptr/\">std::unique_ptr</a> owns their pointer <em>uniquely</em>, meaning no one else can point to that data.</p><p>For the purpose of an example, suppose you have this complex class right here:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">vec2</span> <span class=\"p\">{</span>    <span class=\"nl\">public:</span>    <span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>        <span class=\"n\">vec2</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"vec2 created</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"o\">~</span><span class=\"n\">vec2</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"vec2 destroyed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div></div><p>The following program</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">vec2</span> <span class=\"n\">v</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Would result in the lines “vec2 created”, followed by “vec2 destroyed”. But what happens if you have a pointer and you forget deallocate it?</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">vec2</span><span class=\"p\">();</span></code></pre></div></div><p>Running this program would output just “vec2 created” - You allocated memory and never gave it back, your code has a memory leak, congrats!</p><p>That’s where we go back to smart pointers, if they are as smart as they say they are, we shouldn’t have a memory leak, right?</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">vec2</span><span class=\"p\">());</span></code></pre></div></div><p>As expected, with this we see both the creation and destruction messages printed. If you are on C++14 you can make something like this.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span><span class=\"p\">();</span></code></pre></div></div><p>And now if a program like this, you will see the creation and destruction messages three times, once for each pointer.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">weak_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Going back to our raw pointer example, how could we fix it? The below is perfectly possible!</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">vec2</span><span class=\"p\">();</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">sharedV</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span></code></pre></div></div><p>We create the raw pointer ourselves and then give it to a smart pointer, that will get rid of it for us, that’s doable.</p><hr /><p>Cool, we learned that when smart pointers go out of scope they destroy the object automatically, making our lifes easier when managing memory, but what about their particularities?</p><p>A <a href=\"https://www.cplusplus.com/reference/memory/unique_ptr/\">std::unique_ptr</a>, as the name implies, is unique. Once a unique pointer owns that pointer, no one else can. For example, this is illegal C++.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">thisIsIllegal</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">;</span></code></pre></div></div><p>And as the name <a href=\"https://www.cplusplus.com/reference/memory/shared_ptr/\">std::shared_ptr</a> implies, this is a shared pointer. The following is perfectly legal in C++.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">notIllegal</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">;</span></code></pre></div></div><p>But here’s a trick question: How smart are these unique pointers, do they have any control over raw pointers? What will happen here?</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nf\">vec2</span><span class=\"p\">();</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">);</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">vec2</span><span class=\"o\">&gt;</span> <span class=\"n\">legalOrIllegal</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">);</span></code></pre></div></div><p>We don’t get a compilation error. But we do get a crash. That’s not surprising since you are destroying the same thing twice. The compiler won’t magically know that a raw pointer is referenced by a smart pointer.</p><p>The thing here is that even if you are using smart pointers you have to be a little careful. And if you are on C++14 then, by all means, use <code class=\"language-plaintext highlighter-rouge\">std::make_unique&lt;T&gt;</code> or <code class=\"language-plaintext highlighter-rouge\">std::make_shared&lt;T&gt;</code></p><hr /><p>The difference between a shared and an unique pointer is pretty clear, but what about weak shared pointers? <a href=\"https://www.cplusplus.com/reference/memory/weak_ptr/\">std::weak_ptr</a></p><p>From <strong>cppreference</strong>: <em>“<code class=\"language-plaintext highlighter-rouge\">std::weak_ptr</code> is a smart pointer that holds a non-owning (“weak”) reference to an object that is managed by <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr\" title=\"cpp/memory/shared ptr\">std::shared_ptr</a>”</em></p><p>So a weak pointer has a reference but doesn’t own the thing. What does that mean? It basically means that you can reference it, but you didn’t allocate and, therefore, you can’t really destroy it.</p><p>In more technical terms, all of this works by, behind the curtains, keeping track of how many references a pointer has. So a weak reference has no effect on the reference counting.</p><p>I think the right word here is <em>observer</em>, a weak pointer can observe what a shared pointer holds.</p><hr /><p>Fancy this example.</p><p>In a game engine, it is common to have an entity-component system, and it’s common that the entity will have a reference to a component, and the component will have a reference to its owner entity.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">entity</span><span class=\"p\">;</span><span class=\"k\">class</span> <span class=\"nc\">component</span><span class=\"p\">;</span><span class=\"k\">class</span> <span class=\"nc\">component</span> <span class=\"p\">{</span><span class=\"nl\">public:</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">entity</span><span class=\"o\">&gt;</span> <span class=\"n\">ownerEntity</span><span class=\"p\">;</span>        <span class=\"n\">component</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"component created</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"o\">~</span><span class=\"n\">component</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"component destroyed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"p\">};</span><span class=\"k\">class</span> <span class=\"nc\">entity</span> <span class=\"p\">{</span><span class=\"nl\">public:</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">component</span><span class=\"o\">&gt;</span> <span class=\"n\">childrenComponent</span><span class=\"p\">;</span>        <span class=\"n\">entity</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"entity created</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"o\">~</span><span class=\"n\">entity</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"entity destroyed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div></div><p>Makes, sense, right?</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">entity</span><span class=\"o\">&gt;</span> <span class=\"n\">e</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">entity</span><span class=\"p\">());</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>This will gives us the messages “entity created” followed by “entity destroyed”</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">component</span><span class=\"o\">&gt;</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">component</span><span class=\"p\">());</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>This will gives us the messages “component created” followed by “component destroyed”</p><p>Makes sense, right?</p><p>So if we do this</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">entity</span><span class=\"o\">&gt;</span> <span class=\"n\">e</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">entity</span><span class=\"p\">());</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">component</span><span class=\"o\">&gt;</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">component</span><span class=\"p\">());</span>        <span class=\"n\">e</span><span class=\"o\">-&gt;</span><span class=\"n\">childrenComponent</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>    <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">ownerEntity</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">;</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>We get… “entity created” and “component created”, and that’s all. Nothing is being destroyed. But “Hey!”, you might say, “I thought these <em>smart</em> pointers were <strong>smart!</strong>”</p><p><em>Nothing is smart enough to contain the stupidity of us, the programmers :)</em></p><p>What is happening here is that the entity is referenced by the component and the component is referenced by the entity. Whoah, <strong>circular dependencies!</strong> (Thanks to this <a href=\"https://iamsorush.com/posts/weak-pointer-cpp/\">blog post here</a> that helped me make a bit more sense of all this)</p><p>So when the scope of the main function is over, and we try to destroy the component, the entity is still referencing them, so we can’t delete it. The same happens if we try to destroy the entity first.</p><p>The solution here is simple, one of these two pointers <strong>has</strong> to be a weak pointer, so we get rid of this circular dependency. And I think it makes more sense to make the pointer on the component a weak pointer.</p><p>Here’s the new component class</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">component</span> <span class=\"p\">{</span><span class=\"nl\">public:</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">weak_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">entity</span><span class=\"o\">&gt;</span> <span class=\"n\">ownerEntity</span><span class=\"p\">;</span>        <span class=\"n\">component</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"component created</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"o\">~</span><span class=\"n\">component</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"component destroyed</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"p\">};</span></code></pre></div></div><p>And then, if you run the same program again, it works correctly! both entity and component are created and destroyed. Because the weak pointer doesn’t <em>own</em> a reference to the entity, it is not taken in consideration when counting references.</p><p>So when the entity pointer of the main function goes out of scope, it can be destroyed, because we don’t care about the reference from the weak pointer!</p><p><strong>Wow!</strong> that was a big meditation.</p><p><a href=\"https://twitter.com/guilhermepo2\">twitter</a></p><p><a href=\"https://www.youtube.com/channel/UCOIlr-LtVmaIRdI0oe2lthg\">youtube</a></p>",
            "url": "https://gueepo.me/2022/05/01/smart-pointers-cpp",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2022-05-01T15:00:00+02:00",
            "date_modified": "2022-05-01T15:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2022/03/27/march-2022",
            "title": "How come it's always March?",
            "summary": null,
            "content_text": "Here is to trying new things! I always wanted to write monthly updates and things like that. I have no idea where these will reside, should I just make a new blog for YouTube updates? Should I make one of those newsletters on Twitter? Should I make a mailing list? Should I just keep these to myself? Should I create a Patreon or a Ko-Fi just so I can post these updates?If you are reading this, I DID find a place for it. And I didn’t bother coming back to this line to update it.As I start writing this at 7:12 AM on a Wednesday, listening to Animal Crossing New Horizons Music To Study/Chill/Sleep, it’s still dark outside, can you believe it?! It should NOT be dark past 7 AM, Jerry. With that being said, I do love when it’s still bright at 7 PM.With all that being said, I missed my self-imposed rule that I would post a video every 2 weeks, due to, uh, personal reasons, that’s what they say, isn’t it?I have been struggling to know what to do, I have a lot of video ideas that follow this structure:  Make a coding project while taking notes about the process, about the problems I have faced, about the process of solving those problems, and record videos of work in progress.  Write a script. This usually involves me picking a specific thing of the project to be the highlight, or just making it about the whole process.  Make a shot list. Usually I will just attribute to the script which parts should be a-roll (just me talking to the camera) and which parts should be b-roll (that’s when I want to show you something specific)  Record all A-roll and B-roll. There were, and still are, some issues here.          The first one was that I had to record audio and video separately. I would record video with a Nikon D3300 DSLR for that high quality 1080p video that I will eventually mess up on editing, and record audio with my good old Blue Yeti. It might seem like a small thing, but having to sync audio is so limiting to what I can do with the a-rolls. The more video files I have, harder it is to organize and easier it is to mess things up. But alas, I acquired a Rode Wireless Go II and now I don’t need to sync audio anymore! I’m loving this little thing so far and the sound quality is actually amazing.      The second issue is that recording b-roll can be hard. A lot of it is getting footage of me coding. And if you noticed, at this point the coding project is done! So a lot of it is just me typing some code while getting the footage. I really want to make a tool where I put the code and it just outputs it one letter at a time, giving it that typing effect, it’s not hard to do the typing, the difficult thing is replicating the color coding and the indentation of a programming language. I looked into some typing plugins for Visual Studio Code, but I didn’t find one that worked so far.      The other trick part of getting B-roll is that if I don’t record a part of the process, well, there’s nothing I can do about it. Actually, there is, I can download the project on GitHub at that point in time to get the footage, but if I have to do it multiple times it can get annoying. It involves making meaningful and frequent commits on my projects, which I already try to do, since I use commits as notes too.        Finally, with everything recorded, go into editing. Sometimes I love editing, sometimes I think it’s just something I have to get through. Sometimes I feel like here is where the storytelling happens, and it makes me excited, and sometimes I feel like storytelling happens on Part 2 (Writing the Script), the truth is probably that both can be true and it’s all up to what’s best for my workflow?! And I think I prefer creating the story and the shots before recording or editing. The biggest lesson I learned so far is that I should be mindful of every second of a video.There’s a lot of steps to make a video! And I wanted to try something easier. I want to just work on a project while taking notes and record videos about the process, and when I have something to say, I just turn on the camera, get my lavalier microphone and start talking. And then I will figure everything out on edit. I actually like the idea and I want to try a new series where I will be making a game engine in DirectX while reading the book Game Coding Complete, Fourth Edition.That is not to say I will give up on making videos with the Code/Write/Record/Edit workflow, I’m simply saying I might try both, but that at the moment I’m leaning more towards devlogs?I have been addicted to this YouTube channel doobydobap and I wanted to try something on that style, but with coding as the main theme instead of cooking, that’s the driving force behind the idea of the DirectX game engine series.I still want to make two videos before starting this series: One about remaking the broughlike game I’ve made in Godot, in Unity. The second one is about the renderer for my 2D game engine (gueepo2D). And I want to try doing something different with this one, instead of just talking to the camera sitting on a chair. I have no idea what that something is, though.After that I have a “pilot” devlog that I think will be about tilemaps for my 2D game engine. And THEN I can start with the DirectX Game Engine series, that will be, like, 20 videos or so?! I am already reading the book and planning how to do it.It’s going to be harder than I thought. The book uses a deprecated library called DXUT, an older version of Visual Studio, and it just goes over code explaining stuff. It’s not a book about incrementally adding to your code base. I will have to figure something out and do some extra work in order to show you something on every video, so it’s not just me talking about code and about my days.I always wanted a book or course that would be a starting point to learning DirectX for game development, and I thought this would be it. But it seems like it isn’t, a lot of it because the book is from 2013 and the tech got old over time, so there’s still that “hole” in the game engine development world.And also I have been questioning myself if it is “correct” of me to just read this book and talk about its every single chapter on YouTube videos, and make an open-source engine with it. It’s probably going to end up very different, but here’s my question: “After I finish this series of videos, will there be a reason to acquire the book?” - I think this question is (i) overestimating my abilities of doing a comprehensive series of videos on a game engine, so yeah, the book will still teach you more, and (ii) you can’t really find this book as “new” anymore, so it doesn’t really matter? I wouldn’t be hurting anyone financially?Now, hopefully this is going to be an exciting journey!Something that is on my backburner is that my game engine gueepo2D turns 1-year old in September, and I was thinking of setting up the goal of releasing a free game on Steam on that date, I still have 6 months, but you better believe me that if I really want to achieve this goal, I have to start working on it SOON :tm:Working on two engines at the same time? This is madness!Random StuffbooksSo, this month I’ve read two books, and started a third one.  “Iron Widow”, by Xiran Jay Zhao. It’s a very interesting read, it’s a Young Adult novel, which is not really my thing, but it did expand my view on what a book can be, the whole thing feels like a Mecha Anime, and I mean it in a good way.  “How to make a Video Game All By Yourself”, by Matt Hackett. It was rather simple, but an interesting and short read, it gives some pointers on how to do it and some advice, I might take up on its lessons about Exploring until you find something that “scratches your itch”. At the moment, that’s making game engines. When I think about making a game in Unity, I’m kinda like: meh. But if I think about making the same game on my own custom C++ game engine, damn, I feel like I want to start coding RIGHT NOW.  And now I’m reading “A People’s Guide to Capitalism” by Hadas Thier. Uuh, don’t worry about it :)moveisI watched a few movies. The second and third part of Kanye West documentary “jeen-yuhs”, and “The Gods Must Be Crazy”, a 1980 comedy set in Botswana! They are all interesting! But not enough for me to make a bigger paragraph about them, talking about Kanye West nowadays is like opening a can of worms, but the documentaries do be very interesting.bideo gamsI’ve been playing some Elden Ring! I have a dual katana yielder character on PC and a mage on Xbox - I’m only 20 hours in, it’s not a lot, but hey, that’s more than I have put on any game since Hades was released in September 2020.Something that I came to find out is that Elden Ring and Bloodborne both uses the same level up equation, therefore, my level up calculator is still valid!I have this idea for a series of videos where I pick a mechanic or system in a game, recreate it and talk about it. What picks my interest in Elden Ring (and all Souls games before it) is the messaging system, I’m actually curious on how that would be implemented. I’m not well versed on networking code, so this could be an easier first attempt in order to get my feet wet instead of nose diving into full networked gameplay.aah, dog!Stay well, and see you next month!twitteryoutube",
            "content_html": "<p>Here is to trying new things! I always wanted to write monthly updates and things like that. I have no idea where these will reside, should I just make a <em>new</em> blog for YouTube updates? Should I make one of those newsletters on Twitter? Should I make a mailing list? Should I just keep these to myself? Should I create a Patreon or a Ko-Fi just so I can post these updates?</p><p>If you are reading this, I <em>DID</em> find a place for it. And I didn’t bother coming back to this line to update it.</p><p>As I start writing this at 7:12 AM on a Wednesday, listening to <strong>Animal Crossing New Horizons Music To Study/Chill/Sleep,</strong> it’s still dark outside, can you believe it?! It should <em>NOT</em> be dark past 7 AM, Jerry. With that being said, I do love when it’s still bright at 7 PM.</p><p>With all that being said, I missed my self-imposed rule that I would post a video every 2 weeks, due to, uh, <em>personal</em> reasons, that’s what they say, isn’t it?</p><p>I have been struggling to know what to do, I have a lot of video ideas that follow this structure:</p><ol>  <li><strong>Make a coding project</strong> while taking notes about the process, about the problems I have faced, about the process of solving those problems, and record videos of work in progress.</li>  <li><strong>Write a script.</strong> This usually involves me picking a specific thing of the project to be the highlight, or just making it about the whole process.</li>  <li><strong>Make a shot list.</strong> Usually I will just attribute to the script which parts should be a-roll (just me talking to the camera) and which parts should be b-roll (that’s when I want to show you something specific)</li>  <li><strong>Record all A-roll and B-roll.</strong> There were, and still are, some issues here.    <ol>      <li>The first one was that I had to record audio and video separately. I would record video with a Nikon D3300 DSLR for that <em>high quality</em> 1080p video that I will eventually mess up on editing, and record audio with my good old Blue Yeti. It might seem like a small thing, but having to sync audio is so limiting to what I can do with the a-rolls. The more video files I have, harder it is to organize and easier it is to mess things up. But alas, I acquired a Rode Wireless Go II and now I don’t need to sync audio anymore! I’m loving this little thing so far and the sound quality is actually amazing.</li>      <li>The second issue is that recording b-roll can be hard. A lot of it is getting footage of me coding. And if you noticed, at this point the coding project is done! So a lot of it is just me typing some code while getting the footage. I really want to make a tool where I put the code and it just outputs it one letter at a time, giving it that typing effect, it’s not hard to do the typing, the difficult thing is replicating the color coding and the indentation of a programming language. I looked into some typing plugins for Visual Studio Code, but I didn’t find one that worked so far.</li>      <li>The other trick part of getting B-roll is that if I don’t record a part of the process, well, there’s nothing I can do about it. Actually, there is, I can download the project on GitHub at that point in time to get the footage, but if I have to do it multiple times it can get annoying. It involves making meaningful and frequent commits on my projects, which I already <em>try</em> to do, since I use commits as notes too.</li>    </ol>  </li>  <li>Finally, with everything recorded, go into editing. Sometimes I love editing, sometimes I think it’s just something I have to get through. Sometimes I feel like here is where the storytelling happens, and it makes me excited, and sometimes I feel like storytelling happens on Part 2 (Writing the Script), the truth is probably that both can be true and it’s all up to what’s best for my workflow?! And I think I prefer creating the story and the shots before recording or editing. The biggest lesson I learned so far is that I should be mindful of every second of a video.</li></ol><p>There’s a lot of steps to make a video! And I wanted to try something easier. I want to just work on a project while taking notes and record videos about the process, and when I have something to say, I just turn on the camera, get my lavalier microphone and start talking. And then I will figure everything out on edit. I actually like the idea and I want to try <em>a new series</em> where I will be making a game engine in DirectX while reading the book <em>Game Coding Complete, Fourth Edition</em>.</p><p>That is not to say I will give up on making videos with the Code/Write/Record/Edit workflow, I’m simply saying I might try both, but that at the moment I’m leaning more towards devlogs?</p><p>I have been addicted to this YouTube channel <em>doobydobap</em> and I wanted to try something on that style, but with coding as the main theme instead of cooking, that’s the driving force behind the idea of the DirectX game engine series.</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0onVbAuBGWI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p>I still want to make two videos before starting this series: One about remaking the <em>broughlike</em> game I’ve made in Godot, in Unity. The second one is about the renderer for my 2D game engine (gueepo2D). And I want to try doing something different with this one, instead of just talking to the camera sitting on a chair. I have no idea what that <em>something</em> is, though.</p><p>After that I have a “pilot” devlog that I think will be about tilemaps for my 2D game engine. And THEN I can start with the DirectX Game Engine series, that will be, like, 20 videos or so?! I am already reading the book and planning how to do it.</p><p>It’s going to be harder than I thought. The book uses a deprecated library called DXUT, an older version of Visual Studio, and it just goes over code explaining stuff. It’s not a book about incrementally adding to your code base. I will have to figure something out and do some extra work in order to show you <em>something</em> on every video, so it’s not just me talking about code and about my days.</p><p>I always wanted a book or course that would be a starting point to learning DirectX for game development, and I thought this would be it. But it seems like it isn’t, a lot of it because the book is from 2013 and the tech got old over time, so there’s still that “hole” in the game engine development world.</p><p>And also I have been questioning myself if it is “correct” of me to just read this book and talk about its every single chapter on YouTube videos, and make an open-source engine with it. It’s probably going to end up very different, but here’s my question: “After I finish this series of videos, will there be a reason to acquire the book?” - I think this question is (i) overestimating my abilities of doing a comprehensive series of videos on a game engine, so yeah, the book will still teach you more, and (ii) you can’t really find this book as “new” anymore, so it doesn’t really matter? I wouldn’t be hurting anyone financially?</p><p>Now, hopefully this is going to be an exciting journey!</p><p>Something that is on my backburner is that my game engine gueepo2D turns 1-year old in September, and I was thinking of setting up the goal of releasing a free game on Steam on that date, I still have 6 months, but you better believe me that if I really want to achieve this goal, I have to start working on it <em>SOON</em> :tm:</p><p>Working on two engines at the same time? This is madness!</p><h2 id=\"random-stuff\"><em>Random Stuff</em></h2><p>books</p><p>So, this month I’ve read two books, and started a third one.</p><ol>  <li>“Iron Widow”, by Xiran Jay Zhao. It’s a very interesting read, it’s a Young Adult novel, which is not really my thing, but it did expand my view on what a book can be, the whole thing feels like a Mecha Anime, and I mean it in a good way.</li>  <li>“How to make a Video Game All By Yourself”, by Matt Hackett. It was rather simple, but an interesting and short read, it gives some pointers on how to do it and some advice, I might take up on its lessons about Exploring until you find something that “scratches your itch”. At the moment, that’s making game engines. When I think about making a game in Unity, I’m kinda like: meh. But if I think about making the same game on my own custom C++ game engine, damn, I feel like I want to start coding RIGHT NOW.</li>  <li>And now I’m reading “A People’s Guide to Capitalism” by Hadas Thier. Uuh, don’t worry about it :)</li></ol><p>moveis</p><p>I watched a few movies. The second and third part of Kanye West documentary “jeen-yuhs”, and “The Gods Must Be Crazy”, a 1980 comedy set in Botswana! They are all interesting! But not enough for me to make a bigger paragraph about them, talking about Kanye West nowadays is like opening a can of worms, but the documentaries do be very interesting.</p><p>bideo gams</p><p><img src=\"https://gueepo.me/images/ytb/eldenring.png\" alt=\"Tux, the Linux mascot\" /></p><p>I’ve been playing some Elden Ring! I have a dual katana yielder character on PC and a mage on Xbox - I’m only 20 hours in, it’s not a lot, but hey, that’s more than I have put on any game since Hades was released in September 2020.</p><p>Something that I came to find out is that Elden Ring and Bloodborne both uses the same level up equation, therefore, <a href=\"https://gueepo.me/real/bbcalc/\">my level up calculator is still valid!</a></p><p>I have this idea for a series of videos where I pick a mechanic or system in a game, recreate it and talk about it. What picks my interest in Elden Ring (and all Souls games before it) is the messaging system, I’m actually curious on how that would be implemented. I’m not well versed on networking code, so this could be an easier first attempt in order to get my feet wet instead of nose diving into full networked gameplay.</p><p><img src=\"https://gueepo.me/images/ytb/aahdog.png\" alt=\"Tux, the Linux mascot\" /></p><p>aah, dog!</p><p>Stay well, and see you next month!</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MR61TduJCHQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe><p><a href=\"http://twitter.com/guilhermepo2\">twitter</a><br /><a href=\"https://www.youtube.com/channel/UCOIlr-LtVmaIRdI0oe2lthg\">youtube</a></p>",
            "url": "https://gueepo.me/2022/03/27/march-2022",
            "image": "/images/ytb/ytbupdates.png",
            
            
            
            
            "date_published": "2022-03-27T01:06:52+01:00",
            "date_modified": "2022-03-27T01:06:52+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2022/03/24/what-if-strings-were-ints",
            "title": "What if strings were ints?",
            "summary": null,
            "content_text": "There comes a time in everyone’s life where they ask themselves: “What if strings, but integers?”Strings are a complicated bit, eh. At first, they might seem fairly straightforward, what is out there that a std::string can’t handle?! It happens that the answer is a lot, actually.A big concern on strings is internationalization ( i.e. translating things :) ), but that’s not the point of this post, I just wanted to put that in your mind. The point of this post is to talk a little bit about performance!Strings are expensive to work with at runtime, for you, a human, it is fairly straightforward to use your capabilities to know if, let’s say, “jalapeno poppers” and “potatoes” are different chains of text. But for a computer? not so much. Give a computer the task to compare the words “microphone” and “microphone” and it will go like “yep, sure that’s the same letter on the first position, yep, sure that’s the same letter on the second position (…)”. The point is that comparing and copying strings is expensive.According to Jason Gregory:  “During one project I worked on, we profiled our game’s performance only to discover that strcmp() and strcpy() were the top two most expensive functions!What if there was a way to make it better? Well, what if we could hash our strings?Although for you, a human, comparing 238403294 and 238043294 might be a difficult task, a computer can look at it and be like “yep, sure they are not the same!”I know you thought they were the same :)If we have the ability to hash a string, then checking if a string is the same as another is fairly straightforward, and even better, you can stablish a “less than” and “bigger than” relationship between strings. Whoah, sorting strings!And maybe we could have a hashmap that establishes a relationship between the hashes and the strings, so if you use the same string in another part of the code, it won’t need to create that string, which is a double win since you don’t have the memory overhead of allocating that string and you don’t have the performance overhead of creating it.So how do you hash a string?Hashing algorithms are not the most straightforward things out there.unsigned hash(unsigned K){   K ^= K &gt;&gt; (w-m);    return (a*K) &gt;&gt; (w-m);}I mean… Sure… sourceAnd unless you really want to get into it, most of it is finding a function that will work and give the same result for the same string, better trust the smart people coming up with the MATH this time.But in essence, any hashing algorithm will do. A famous one is CRC32. Let’s take a look. Sourceunsigned reverse(unsigned x) {   x = ((x &amp; 0x55555555) &lt;&lt;  1) | ((x &gt;&gt;  1) &amp; 0x55555555);   x = ((x &amp; 0x33333333) &lt;&lt;  2) | ((x &gt;&gt;  2) &amp; 0x33333333);   x = ((x &amp; 0x0F0F0F0F) &lt;&lt;  4) | ((x &gt;&gt;  4) &amp; 0x0F0F0F0F);   x = (x &lt;&lt; 24) | ((x &amp; 0xFF00) &lt;&lt; 8) |       ((x &gt;&gt; 8) &amp; 0xFF00) | (x &gt;&gt; 24);   return x;}/* This is the basic CRC algorithm with no optimizations. It follows thelogic circuit as closely as possible. */unsigned int crc32a(const char* message) {   int i, j;   unsigned int byte, crc;   i = 0;   crc = 0xFFFFFFFF;   while (message[i] != 0) {      byte = message[i];            // Get next byte.      byte = reverse(byte);         // 32-bit reversal.      for (j = 0; j &lt;= 7; j++) {    // Do eight times.         if ((int)(crc ^ byte) &lt; 0)              crc = (crc &lt;&lt; 1) ^ 0x04C11DB7;         else crc = crc &lt;&lt; 1;         byte = byte &lt;&lt; 1;          // Ready next msg bit.      }      i = i + 1;   }   return reverse(~crc);}I mean… Sure dude. What matters here is that if you call crc32a(\"Jalapeno Poppers\") you will get 3660972395.And that’s pretty much it?Let’s take a look at another way to hash a string, this one comes from the book Game Coding Complete, Fourth Edition. Sourcevoid* HashName(char const* pIdentString) {\tunsigned long BASE = 65521L;\tunsigned long NMAX = 5552;#define DO1(buf, i) { s1 += tolower(buf[i]); s2 += s1;}#define DO2(buf, i) DO1(buf, i); DO1(buf, i+1);#define DO4(buf, i) DO2(buf, i); DO2(buf, i+2);#define DO8(buf, i) DO4(buf, i); DO4(buf, i+4);#define DO16(buf) DO8(buf, 0); DO8(buf, 8);\tif (pIdentString == nullptr) {\t\treturn nullptr;\t}\tunsigned long s1 = 0;\tunsigned long s2 = 0;\tfor (size_t len = strlen(pIdentString); len &gt; 0; /* x */) {\t\tunsigned long k = len &lt; NMAX ? len : NMAX;\t\tlen -= k;\t\twhile (k &gt;= 16) {\t\t\tDO16(pIdentString);\t\t\tpIdentString += 16;\t\t\tk -= 16;\t\t}\t\tif (k != 0) {\t\t\tdo {\t\t\t\ts1 += tolower(*pIdentString++);\t\t\t\ts2 += s1;\t\t\t} while (--k);\t\t}\t\ts1 %= BASE;\t\ts2 %= BASE;\t}\treturn reinterpret_cast&lt;void*&gt;((s2 &lt;&lt; 16) | s1);#undef DO1#undef DO2#undef DO4#undef DO8#undef DO16}If this one seems even more cryptic, check the source for some comments and clarifications from the authors. This one returns a void* because it looks fancier on the editor when debugging, but we can get an unsigned long like so:unsigned long poppers2 = reinterpret_cast&lt;unsigned long&gt;(HashName(\"Jalapeno Poppers\"));And the result of that will be 906888819.Of course, we are talking about hash functions, so it’s possible that a collision happens, which means it’s possible that different strings will lead to the same number. But if you use something like CRC-32, your strings can be mapped into 4 billion different values, and your game won’t contain nearly as much that amount of strings, so the likelihood of a collision is very low. But if it happens, a real solution that I’ve seen is just adding a space at the end of one of the strings. If you are not happy with that, listen to Jason Gregory:  That being said, Naughty Dog has moved to a 64-bit hashing function for The Last of Us Part II and all of our future game titles; this should essentially eliminate the possibility of hash collisions.Just add more bits to the hashing function!It’s still a bit of a jump from having a hashing function to having a full string class able to store a string hashmap and have comparisons, but hey, the most confusing part is over. And if you want more on that, you can look at the Game Coding Complete code: String.h String.cpptwitteryoutube",
            "content_html": "<p>There comes a time in everyone’s life where they ask themselves: “What if strings, but integers?”</p><p>Strings are a complicated bit, eh. At first, they might seem fairly straightforward, what is out there that a <code class=\"language-plaintext highlighter-rouge\">std::string</code> can’t handle?! It happens that the answer is a lot, actually.</p><p>A big concern on strings is <em>internationalization</em> ( i.e. translating things :) ), but that’s not the point of this post, I just wanted to put that in your mind. The point of this post is to talk a little bit about performance!</p><p>Strings are expensive to work with at runtime, for you, a human, it is fairly straightforward to use your capabilities to know if, let’s say, “jalapeno poppers” and “potatoes” are different chains of text. But for a computer? not so much. Give a computer the task to compare the words “microphone” and “microphone” and it will go like “yep, sure that’s the same letter on the first position, yep, sure that’s the same letter on the second position (…)”. The point is that comparing and copying strings is expensive.</p><p>According to <a href=\"https://www.gameenginebook.com/\">Jason Gregory</a>:</p><blockquote>  <p>“During one project I worked on, we profiled our game’s performance only to discover that strcmp() and strcpy() were the top two most expensive functions!</p></blockquote><p>What if there was a way to make it better? Well, what if we could hash our strings?</p><p>Although for you, a human, comparing 238403294 and 238043294 might be a difficult task, a computer can look at it and be like “yep, sure they are not the same!”</p><p>I know you thought they were the same :)</p><p>If we have the ability to hash a string, then checking if a string is the same as another is fairly straightforward, and even better, you can stablish a “less than” and “bigger than” relationship between strings. Whoah, sorting strings!</p><p>And maybe we could have a hashmap that establishes a relationship between the hashes and the strings, so if you use the same string in another part of the code, it won’t need to create that string, which is a double win since you don’t have the memory overhead of allocating that string and you don’t have the performance overhead of creating it.</p><p>So <strong>how do you hash a string?</strong></p><p>Hashing algorithms are not the most straightforward things out there.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">unsigned</span> <span class=\"nf\">hash</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">K</span><span class=\"p\">)</span><span class=\"p\">{</span>   <span class=\"n\">K</span> <span class=\"o\">^=</span> <span class=\"n\">K</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">);</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">K</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>I mean… Sure… <a href=\"https://en.wikipedia.org/wiki/Hash_function#Multiplicative_hashing\">source</a></p><p>And unless you really want to get into it, most of it is finding a function that will work and give the same result for the same string, better trust the smart people coming up with the <strong>MATH</strong> this time.</p><p>But in essence, any hashing algorithm will do. A famous one is CRC32. Let’s take a look. <a href=\"https://stackoverflow.com/questions/34153765/generate-checksum-for-string\">Source</a></p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">unsigned</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x55555555</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span>  <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span>  <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x55555555</span><span class=\"p\">);</span>   <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x33333333</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span>  <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span>  <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x33333333</span><span class=\"p\">);</span>   <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x0F0F0F0F</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span>  <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span>  <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x0F0F0F0F</span><span class=\"p\">);</span>   <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">24</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF00</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">|</span>       <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF00</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">24</span><span class=\"p\">);</span>   <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"cm\">/* This is the basic CRC algorithm with no optimizations. It follows thelogic circuit as closely as possible. */</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"nf\">crc32a</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">;</span>   <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">byte</span><span class=\"p\">,</span> <span class=\"n\">crc</span><span class=\"p\">;</span>   <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>   <span class=\"n\">crc</span> <span class=\"o\">=</span> <span class=\"mh\">0xFFFFFFFF</span><span class=\"p\">;</span>   <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"n\">byte</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>            <span class=\"c1\">// Get next byte.</span>      <span class=\"n\">byte</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"p\">);</span>         <span class=\"c1\">// 32-bit reversal.</span>      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"c1\">// Do eight times.</span>         <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"n\">crc</span> <span class=\"o\">^</span> <span class=\"n\">byte</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>              <span class=\"n\">crc</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">crc</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"mh\">0x04C11DB7</span><span class=\"p\">;</span>         <span class=\"k\">else</span> <span class=\"n\">crc</span> <span class=\"o\">=</span> <span class=\"n\">crc</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>         <span class=\"n\">byte</span> <span class=\"o\">=</span> <span class=\"n\">byte</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>          <span class=\"c1\">// Ready next msg bit.</span>      <span class=\"p\">}</span>      <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>   <span class=\"p\">}</span>   <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">crc</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>I mean… Sure dude. What matters here is that if you call <code class=\"language-plaintext highlighter-rouge\">crc32a(\"Jalapeno Poppers\")</code> you will get <code class=\"language-plaintext highlighter-rouge\">3660972395</code>.</p><p>And that’s pretty much it?</p><p>Let’s take a look at another way to hash a string, this one comes from the book Game Coding Complete, Fourth Edition. <a href=\"https://github.com/MikeMcShaffry/gamecode4/blob/master/Source/GCC4/Utilities/String.cpp\">Source</a></p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"nf\">HashName</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"k\">const</span><span class=\"o\">*</span> <span class=\"n\">pIdentString</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">BASE</span> <span class=\"o\">=</span> <span class=\"mi\">65521L</span><span class=\"p\">;</span>\t<span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">NMAX</span> <span class=\"o\">=</span> <span class=\"mi\">5552</span><span class=\"p\">;</span><span class=\"cp\">#define DO1(buf, i) { s1 += tolower(buf[i]); s2 += s1;}#define DO2(buf, i) DO1(buf, i); DO1(buf, i+1);#define DO4(buf, i) DO2(buf, i); DO2(buf, i+2);#define DO8(buf, i) DO4(buf, i); DO4(buf, i+4);#define DO16(buf) DO8(buf, 0); DO8(buf, 8);</span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pIdentString</span> <span class=\"o\">==</span> <span class=\"nb\">nullptr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"nb\">nullptr</span><span class=\"p\">;</span>\t<span class=\"p\">}</span>\t<span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t<span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">pIdentString</span><span class=\"p\">);</span> <span class=\"n\">len</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* x */</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">len</span> <span class=\"o\">&lt;</span> <span class=\"n\">NMAX</span> <span class=\"o\">?</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">NMAX</span><span class=\"p\">;</span>\t\t<span class=\"n\">len</span> <span class=\"o\">-=</span> <span class=\"n\">k</span><span class=\"p\">;</span>\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">DO16</span><span class=\"p\">(</span><span class=\"n\">pIdentString</span><span class=\"p\">);</span>\t\t\t<span class=\"n\">pIdentString</span> <span class=\"o\">+=</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\t\t\t<span class=\"n\">k</span> <span class=\"o\">-=</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">do</span> <span class=\"p\">{</span>\t\t\t\t<span class=\"n\">s1</span> <span class=\"o\">+=</span> <span class=\"n\">tolower</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pIdentString</span><span class=\"o\">++</span><span class=\"p\">);</span>\t\t\t\t<span class=\"n\">s2</span> <span class=\"o\">+=</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\t\t\t<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">k</span><span class=\"p\">);</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">s1</span> <span class=\"o\">%=</span> <span class=\"n\">BASE</span><span class=\"p\">;</span>\t\t<span class=\"n\">s2</span> <span class=\"o\">%=</span> <span class=\"n\">BASE</span><span class=\"p\">;</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"o\">*&gt;</span><span class=\"p\">((</span><span class=\"n\">s2</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">s1</span><span class=\"p\">);</span><span class=\"cp\">#undef DO1#undef DO2#undef DO4#undef DO8#undef DO16</span><span class=\"p\">}</span></code></pre></div></div><p>If this one seems even more cryptic, check the source for some comments and clarifications from the authors. This one returns a <code class=\"language-plaintext highlighter-rouge\">void*</code> because it looks fancier on the editor when debugging, but we can get an unsigned long like so:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">poppers2</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">HashName</span><span class=\"p\">(</span><span class=\"s\">\"Jalapeno Poppers\"</span><span class=\"p\">));</span></code></pre></div></div><p>And the result of that will be <code class=\"language-plaintext highlighter-rouge\">906888819</code>.</p><p>Of course, we are talking about hash functions, so it’s possible that a collision happens, which means it’s possible that different strings will lead to the same number. But if you use something like CRC-32, your strings can be mapped into 4 billion different values, and your game won’t contain nearly as much that amount of strings, so the likelihood of a collision is very low. But if it happens, a real solution that I’ve seen is just adding a space at the end of one of the strings. If you are not happy with that, listen to Jason Gregory:</p><blockquote>  <p>That being said, Naughty Dog has moved to a 64-bit hashing function for The Last of Us Part II and all of our future game titles; this should essentially eliminate the possibility of hash collisions.</p></blockquote><p>Just add more bits to the hashing function!</p><p>It’s still a bit of a jump from having a hashing function to having a full string class able to store a string hashmap and have comparisons, but hey, the most confusing part is over. And if you want more on that, you can look at the Game Coding Complete code: <a href=\"https://github.com/MikeMcShaffry/gamecode4/blob/master/Source/GCC4/Utilities/String.h\">String.h</a> <a href=\"https://github.com/MikeMcShaffry/gamecode4/blob/master/Source/GCC4/Utilities/String.cpp\">String.cpp</a></p><p><a href=\"https://twitter.com/guilhermepo2\">twitter</a></p><p><a href=\"https://www.youtube.com/channel/UCOIlr-LtVmaIRdI0oe2lthg\">youtube</a></p>",
            "url": "https://gueepo.me/2022/03/24/what-if-strings-were-ints",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2022-03-24T15:00:00+01:00",
            "date_modified": "2022-03-24T15:00:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2021/09/06/cpp-17-filesys",
            "title": "What about C++17 filesystem?",
            "summary": null,
            "content_text": "So here is the issue: In my simple engine I’m developing that are basically two (or more) working directories. There is the game, the engine and the tools, but let’s focus on the game and on the engine.Obviously, the game will have its own assets, so we need a working path that the game project can easily access to load said assets. But it is also important that the engine have its own assets, which I call “Default Assets”, very creative, eh.And sure, it’s not difficult to set up the engine default assets path in relation to the game project path. But what about when I’m working directly in the engine?Let me illustrate that with a better example.When I’m working directly in the engine, the DefaultAssets folder path is \"./src/DefaultAssets\" - not the greatest path, I know, why the assets are on the source folder?! But let’s not get caught in details.When I’m working on the sandbox project, usually for testing things in the engine, the DefaultAssets folder path is \"../visions2D/src/DefaultAssets\"And now, let’s take a look at the last sample game I’ve made: Flappy ASCII. The path for the DefaultAssets folder in this case would be: \"../visions2D/visions2D/src/DefaultAssets\" - an even worst path, I know, why there are two visions2D folder?My engine has problems, ok, I know.But the question I want to pose is: Wouldn’t it be nice if the engine could figure out by itself a “root engine folder” and a “root current project folder”? - And then we effectively have two working paths and we can design an API to search on each one, and a general API that will search on both.To try to answer that I did some research on the std::filesystem library implemented in C++17.You can check compiler compatibility here: std::filesystem compiler support.There is a lot going on here, and the official documentation will be your best friend. I didn’t really find a lot of usage, concrete examples or whatnot with this filesystem, as it is fairly recent. What I did find, though, is this implementation of something similar but compatible way back to C++11.Classes-wise, your best friends are going to be: path, directory_entry, and directory_iterator.As for non-member functions and file types, current_path, exists, and is_directory are also pretty nice.And to be fair, what the documentation and these classes entail make it very straightforward to solve the problem I want to solve. It’s also worth noting that the path class has a lot of helpful functions!On the example I mentioned above: How do we find the default assets folder on the engine given that we are on the sandbox?!We can start with this nice little thing:std::filesystem::path sandboxpath(std::filesystem::current_path());Since we know that the visions2D folder and the sandbox folder are on the same level, we can use the nice replace_filename() function provided to us:std::filesystem::path visions2Droot = defaultassets.replace_filename(std::filesystem::path(\"visions2D\"));Another useful operation we can perform here is: sandboxpath.parent_path()With that, I would have the root of all the roots, on that folder I know I’m one above sandbox, and one above the visions2D core engine, and I can use the root path to pretty much search for anything I need.But anyway, we have the visions2D core engine path now, how do we search on the files and folders inside of it?for (const std::filesystem::directory_entry&amp; v22dir : std::filesystem::directory_iterator(visions2Droot))oof, there’s a lot to unpack here. We are iterating with:const std::filesystem::directory_entry&amp;That’s why I mentioned directory_entry would be a nice thing to read at, but you can just auto it.for (const auto&amp; v22dir : std::filesystem::directory_iterator(visions2Droot))directory_iterator provides us with a nice constructor that accepts a path. And now that we are iterating on the folder, we check if the individual entries are folders, and if they are we iterate on them, until we find a folder called “DefaultAssets”.Here’s an example:for (const auto&amp; visions2Dentry : std::filesystem::directory_iterator(visions2Droot)) {\tif (std::filesystem::is_directory(visions2Dentry)) {\t\tfor (auto const&amp; subdir : std::filesystem::directory_iterator(visions2Dentry)) {\t\t\tif (std::filesystem::is_directory(subdir)) {\t\t\t\tif (subdir.path().filename() == \"DefaultAssets\") {\t\t\t\t\tLOG_INFO(\"Bingo!\");\t\t\t\t}\t\t\t}\t\t}\t}}Of course there is a lot of repetition here that could be better organized with functions (hey, maybe even recursive functions!) - But it’s just an example.At the end of this code, the path we desire will be at subdir.path()We did it! Next step is designing an API and accounting for every edge-case out there!twitter",
            "content_html": "<p>So here is the issue: In my simple engine I’m developing that are basically two (or more) working directories. There is the game, the engine and the tools, but let’s focus on the game and on the engine.</p><p>Obviously, the game will have its own assets, so we need a working path that the game project can easily access to load said assets. But it is also important that the engine have its own assets, which I call “Default Assets”, very creative, eh.</p><p>And sure, it’s not difficult to set up the engine default assets path in relation to the game project path. But what about when I’m working directly in the engine?</p><p>Let me illustrate that with a better example.</p><p>When I’m working directly in the engine, the <strong>DefaultAssets</strong> folder path is <code class=\"language-plaintext highlighter-rouge\">\"./src/DefaultAssets\"</code> - not the greatest path, I know, why the assets are on the source folder?! But let’s not get caught in details.</p><p>When I’m working on the sandbox project, usually for testing things in the engine, the <strong>DefaultAssets</strong> folder path is <code class=\"language-plaintext highlighter-rouge\">\"../visions2D/src/DefaultAssets\"</code></p><p>And now, let’s take a look at the last sample game I’ve made: Flappy ASCII. The path for the <strong>DefaultAssets</strong> folder in this case would be: <code class=\"language-plaintext highlighter-rouge\">\"../visions2D/visions2D/src/DefaultAssets\"</code> - an even worst path, I know, why there are <strong>two</strong> visions2D folder?</p><p>My engine has problems, ok, I know.</p><p><strong>But the question I want to pose is:</strong> Wouldn’t it be nice if the engine could figure out by itself a <em>“root engine folder”</em> and a <em>“root current project folder”</em>? - And then we effectively have two working paths and we can design an API to search on each one, and a general API that will search on both.</p><p>To try to answer that I did some research on the <strong>std::filesystem</strong> library implemented in <strong>C++17</strong>.</p><p>You can check compiler compatibility here: <a href=\"https://en.cppreference.com/w/cpp/compiler_support\">std::filesystem compiler support</a>.</p><hr /><p>There is a lot going on here, and the <a href=\"https://en.cppreference.com/w/cpp/filesystem\">official documentation</a> will be your best friend. I didn’t really find a lot of usage, concrete examples or whatnot with this filesystem, as it is fairly recent. What I did find, though, is <a href=\"https://github.com/gulrak/filesystem\">this implementation of something similar but compatible way back to C++11</a>.</p><p>Classes-wise, your best friends are going to be: <strong>path</strong>, <strong>directory_entry</strong>, and <strong>directory_iterator</strong>.</p><p>As for non-member functions and file types, <strong>current_path</strong>, <strong>exists</strong>, and <strong>is_directory</strong> are also pretty nice.</p><p>And to be fair, what the documentation and these classes entail make it very straightforward to solve the problem I want to solve. It’s also worth noting that the path class has a lot of helpful functions!</p><p>On the example I mentioned above: <strong>How do we find the default assets folder on the engine given that we are on the sandbox?!</strong></p><p>We can start with this nice little thing:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">path</span> <span class=\"nf\">sandboxpath</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">current_path</span><span class=\"p\">());</span></code></pre></div></div><p>Since we know that the visions2D folder and the sandbox folder are on the same level, we can use the nice <code class=\"language-plaintext highlighter-rouge\">replace_filename()</code> function provided to us:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">path</span> <span class=\"n\">visions2Droot</span> <span class=\"o\">=</span> <span class=\"n\">defaultassets</span><span class=\"p\">.</span><span class=\"n\">replace_filename</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">\"visions2D\"</span><span class=\"p\">));</span></code></pre></div></div><p>Another useful operation we can perform here is: <code class=\"language-plaintext highlighter-rouge\">sandboxpath.parent_path()</code></p><p>With that, I would have the root of all the roots, on that folder I know I’m one above sandbox, and one above the visions2D core engine, and I can use the root path to pretty much search for anything I need.</p><p>But anyway, we have the visions2D core engine path now, how do we search on the files and folders inside of it?</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">directory_entry</span><span class=\"o\">&amp;</span> <span class=\"n\">v22dir</span> <span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">directory_iterator</span><span class=\"p\">(</span><span class=\"n\">visions2Droot</span><span class=\"p\">))</span></code></pre></div></div><p>oof, there’s a lot to unpack here. We are iterating with:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">directory_entry</span><span class=\"o\">&amp;</span></code></pre></div></div><p>That’s why I mentioned <code class=\"language-plaintext highlighter-rouge\">directory_entry</code> would be a nice thing to read at, but you can just auto it.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">v22dir</span> <span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">directory_iterator</span><span class=\"p\">(</span><span class=\"n\">visions2Droot</span><span class=\"p\">))</span></code></pre></div></div><p><code class=\"language-plaintext highlighter-rouge\">directory_iterator</code> provides us with a nice constructor that accepts a path. And now that we are iterating on the folder, we check if the individual entries are folders, and if they are we iterate on them, until we find a folder called <em>“DefaultAssets”</em>.</p><p>Here’s an example:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">visions2Dentry</span> <span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">directory_iterator</span><span class=\"p\">(</span><span class=\"n\">visions2Droot</span><span class=\"p\">))</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">is_directory</span><span class=\"p\">(</span><span class=\"n\">visions2Dentry</span><span class=\"p\">))</span> <span class=\"p\">{</span>\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"k\">const</span><span class=\"o\">&amp;</span> <span class=\"n\">subdir</span> <span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">directory_iterator</span><span class=\"p\">(</span><span class=\"n\">visions2Dentry</span><span class=\"p\">))</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">is_directory</span><span class=\"p\">(</span><span class=\"n\">subdir</span><span class=\"p\">))</span> <span class=\"p\">{</span>\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">subdir</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">().</span><span class=\"n\">filename</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s\">\"DefaultAssets\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t\t\t\t<span class=\"n\">LOG_INFO</span><span class=\"p\">(</span><span class=\"s\">\"Bingo!\"</span><span class=\"p\">);</span>\t\t\t\t<span class=\"p\">}</span>\t\t\t<span class=\"p\">}</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Of course there is a lot of repetition here that could be better organized with functions (hey, maybe even recursive functions!) - But it’s just an example.</p><p>At the end of this code, the path we desire will be at <code class=\"language-plaintext highlighter-rouge\">subdir.path()</code></p><p>We did it! Next step is designing an API and accounting for every edge-case out there!</p><p><a href=\"https://twitter.com/guilhermepo2\">twitter</a></p>",
            "url": "https://gueepo.me/2021/09/06/cpp-17-filesys",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2021-09-06T15:00:00+02:00",
            "date_modified": "2021-09-06T15:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2021/05/31/for-loop",
            "title": "Iterating on a for loop with ++i or i++?",
            "summary": null,
            "content_text": "I see a lot of for loops around. and sometimes they are written like for(int i = 0; i &lt; 10; i++) and sometimes they are written like for(int i = 0; i &lt; 10; ++i).And for some reason, they were different in my mind. For some reason, I thought ++i would increment at the beginning of the loop whereas i++ would increment at the end, but upon closer inspection, the code behavior didn’t reflect the assumptions I had. So why not do some investigation?You may ask: “How do you investigate the differences?” And the answer for that is Assembly! Everything has to be translated to assembly at some point, so comparing assemblies will show you the real difference between implementations.Consider the following code:for(int i = 0; i &lt; 10; i++) { }Using godbolt we can take a look at how this is translated to assembly.MyFunction():    push    rbp    mov     rbp, rsp    mov     DWORD PTR [rbp-4], 0    jmp     .L2.L3:    add     DWORD PTR [rbp-4], 1.L2:    cmp     DWORD PTR [rbp-4], 9    jle     .L3In a few words, here’s what’s happening:  The value 0 is attributed to a memory address.  We then jump to .L2, where we compare the value with 9 (the final value for the loop)  Then we have a Jump Less/Equal (JLE) to the section .L3. This means we jump to .L3 if the value is less than or equal to 9.  Finally, section .L3 adds 1 to that memory address.Well, I just described what a loop is, but let’s keep going.What happens when I change i++ to ++i?MyFunction():    push    rbp    mov     rbp, rsp    mov     DWORD PTR [rbp-4], 0    jmp     .L2.L3:    add     DWORD PTR [rbp-4], 1.L2:    cmp     DWORD PTR [rbp-4], 9    jle     .L3Literally nothing!So that was very anti-climatic and a very complicated way to say that there is no difference at all between those two things.But hang on! What if we achieve this same behaviour with a while loop? Like so:int i;while(i &lt; 10) {    i++;}We obtain the following assembly for the above code:MyFunction():    push    rbp    mov     rbp, rsp    jmp     .L2.L3:    add     DWORD PTR [rbp-4], 1.L2:    cmp     DWORD PTR [rbp-4], 9    jle     .L3    nopIt’s the same! Were you expecting something different?",
            "content_html": "<p>I see a lot of for loops around. and sometimes they are written like <code class=\"language-plaintext highlighter-rouge\">for(int i = 0; i &lt; 10; i++)</code> and sometimes they are written like <code class=\"language-plaintext highlighter-rouge\">for(int i = 0; i &lt; 10; ++i)</code>.</p><p>And for some reason, they were different in my mind. For some reason, I thought <code class=\"language-plaintext highlighter-rouge\">++i</code> would increment at the beginning of the loop whereas <code class=\"language-plaintext highlighter-rouge\">i++</code> would increment at the end, but upon closer inspection, the code behavior didn’t reflect the assumptions I had. So why not do some investigation?</p><p>You may ask: “How do you investigate the differences?” And the answer for that is <strong>Assembly!</strong> Everything has to be translated to assembly at some point, so comparing assemblies will show you the real difference between implementations.</p><p>Consider the following code:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for(int i = 0; i &lt; 10; i++) { }</code></pre></div></div><p>Using <a href=\"https://godbolt.org/\">godbolt</a> we can take a look at how this is translated to assembly.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MyFunction():    push    rbp    mov     rbp, rsp    mov     DWORD PTR [rbp-4], 0    jmp     .L2.L3:    add     DWORD PTR [rbp-4], 1.L2:    cmp     DWORD PTR [rbp-4], 9    jle     .L3</code></pre></div></div><p>In a few words, here’s what’s happening:</p><ul>  <li>The value 0 is attributed to a memory address.</li>  <li>We then jump to <code class=\"language-plaintext highlighter-rouge\">.L2</code>, where we compare the value with 9 (the final value for the loop)</li>  <li>Then we have a Jump Less/Equal (JLE) to the section <code class=\"language-plaintext highlighter-rouge\">.L3</code>. This means we jump to <code class=\"language-plaintext highlighter-rouge\">.L3</code> if the value is less than or equal to 9.</li>  <li>Finally, section <code class=\"language-plaintext highlighter-rouge\">.L3</code> adds 1 to that memory address.</li></ul><p>Well, I just described what a loop is, but let’s keep going.</p><p><strong>What happens when I change <code class=\"language-plaintext highlighter-rouge\">i++</code> to <code class=\"language-plaintext highlighter-rouge\">++i</code>?</strong></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MyFunction():    push    rbp    mov     rbp, rsp    mov     DWORD PTR [rbp-4], 0    jmp     .L2.L3:    add     DWORD PTR [rbp-4], 1.L2:    cmp     DWORD PTR [rbp-4], 9    jle     .L3</code></pre></div></div><p><strong>Literally nothing!</strong></p><p>So that was very anti-climatic and a very complicated way to say that there is no difference at all between those two things.</p><p><strong>But hang on!</strong> What if we achieve this same behaviour with a while loop? Like so:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>int i;while(i &lt; 10) {    i++;}</code></pre></div></div><p>We obtain the following assembly for the above code:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MyFunction():    push    rbp    mov     rbp, rsp    jmp     .L2.L3:    add     DWORD PTR [rbp-4], 1.L2:    cmp     DWORD PTR [rbp-4], 9    jle     .L3    nop</code></pre></div></div><p><strong>It’s the same!</strong> Were you expecting something different?</p>",
            "url": "https://gueepo.me/2021/05/31/for-loop",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2021-05-31T15:00:00+02:00",
            "date_modified": "2021-05-31T15:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2021/05/01/spritesheets-with-opengl",
            "title": "Figuring out spritesheets on Modern OpenGL",
            "summary": null,
            "content_text": "Probably one of the classicals problems you will face when doing a 2D game, or a 2D game engine, is: “How to make a sprite sheet?”.A sprite sheet, or a tile sheet, or a texture atlas, or whatever fancy name kids nowadays use, is basically a texture where you are interested in rendering just some parts of it, you don’t want to present the texture in its entirety, just a little piece of it. There are performance motivation behind it, of course, creating and binding textures is expensive, so reusing a texture is a good thing, but there is also a productivity aspect to it, working on a tilesheet that is just one file is easier than working on 30 different files, but that’s not today’s topic.Image credits goes to Kenney, whose assets I’ve been using to test and implement this feature (and all other features).Now brace yourselves because we will be looking at a lot of code.Where do we start?When doing the famous OpenGL boilerplate (which is a lot of work, really), you will end up with something on these lines:A float array that will represent the vertices positions and texture coordinates on your shader.float vertices[] = {\t// positions  // texture coords\t 0.5f,  0.5f, 1.0f, 1.0f,   // top right\t 0.5f, -0.5f, 1.0f, 0.0f,   // bottom right\t-0.5f, -0.5f, 0.0f, 0.0f,   // bottom left\t-0.5f,  0.5f, 0.0f, 1.0f    // top left }And then you will bind the array like…glGenBuffers(1, &amp;m_VertexBufferID);glBindBuffer(GL_ARRAY_BUFFER, m_VertexBufferID);glBufferData(GL_ARRAY_BUFFER, _numVerts * (_vertPropertiesCount * sizeof(float)), _verts, GL_STATIC_DRAW);// position attributeglVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*)0);glEnableVertexAttribArray(0);// texture coordsglVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*)(2 * sizeof(float)));glEnableVertexAttribArray(1);glGenBuffers(1, &amp;m_IndexBufferID);glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_IndexBufferID);glBufferData(GL_ELEMENT_ARRAY_BUFFER, _numIndices * sizeof(unsigned int), _indices, GL_STATIC_DRAW);What we have to change to draw parts of a texture?And this is all fine, but when you want to draw small pieces of a big texture, what you want to change is the texture coordinates, texture coordinates are uv coordinates that ranges from (0, 0) to (1, 1), and you have to find the small piece of the texture you want within that range.This usually will involve some math like this:float spriteWidth = 48.0f;float spriteHeight = 48.0f;float tw = spriteWidth / texture-&gt;GetWidth();float th = spriteHeight / texture-&gt;GetHeight();int xPosition = 0;int yPosition = 10;float NewTexCoords[] = {\t(xPosition + 1) * tw, (yPosition + 1) * th,\t(xPosition + 1) * tw, yPosition * th,\txPosition * tw , yPosition * th,\txPosition * tw, (yPosition + 1) * th};And then, boom! You have your new texture coordinates! But as you might see there is still one problem to solve, or one question to ask, if you may wish to frame it like that. How will I dynamically set the texture coordinates?! - That’s where I got lost for a good time.And the solution is simple, really, and it is comprised of two steps.  We have to separate vertex position and texture coordinates.float vertices[] = {\t 0.5f,  0.5f,\t 0.5f, -0.5f,\t-0.5f, -0.5f,\t-0.5f,  0.5f};float texCoords[] = {\t1.0f, 1.0f,\t1.0f, 0.0f,\t0.0f, 0.0f,\t0.0f, 1.0f};Binding them won’t be much different though, you will end up with a new buffer, and one more variable to keep track of.glGenBuffers(1, &amp;m_VertexBufferID);glBindBuffer(GL_ARRAY_BUFFER, m_VertexBufferID);glBufferData(GL_ARRAY_BUFFER, _numVerts * (_vertPropertiesCount * sizeof(float)), _verts, GL_STATIC_DRAW);// position attributeglVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);glEnableVertexAttribArray(0);glGenBuffers(1, &amp;m_TexCoordsBufferID);glBindBuffer(GL_ARRAY_BUFFER, m_TexCoordsBufferID);glBufferData(GL_ARRAY_BUFFER, _numVerts * (_vertPropertiesCount * sizeof(float)), _texCoords, GL_STATIC_DRAW);// texture coordsglVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void*)0);glEnableVertexAttribArray(1);glGenBuffers(1, &amp;m_IndexBufferID);glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_IndexBufferID);glBufferData(GL_ELEMENT_ARRAY_BUFFER, _numIndices * sizeof(unsigned int), _indices, GL_STATIC_DRAW);It’s worth noting that the vertex shader didn’t change at all!Now, it’s time for the grande finale! With these data properly separated, all you have to do is change the data on the texture coordinates buffer!Should I use glBufferData again?! No! Let’s take a peek at documentation, shall we? glBufferData tells us the following:While creating the new storage, any pre-existing data store is deleted. The new data store is created with the specified size in bytes and usage. If data is not NULL, the data store is initialized with data from this pointer.Creating a new storage? deleting pre-existing data store? Sounds like a bit too much when we just want to move some floats around, right?That’s where glBufferSubData kicks in, and its documentation tell us:When replacing the entire data store, consider using glBufferSubData rather than completely recreating the data store with glBufferData. This avoids the cost of reallocating the data store.Avoiding the cost of reallocating data? That sounds like something we want to do!So changing the data on our Texture Coordinates buffer is as simple as:glBindBuffer(GL_ARRAY_BUFFER, m_TexCoordsBufferID);glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * (2 * sizeof(float)), _texCoords);And with that I was finally able to get an individual sprite on a spritesheet, and with some extra magic, I was finally able to render a map imported from Tiled!If you have read so far into this, thank you! I lost a good amount of time wrapping my head around this issue and had trouble figuring out the step of dynamically setting just the texture coordinates. If you are feeling venturous enough, you want to give feedback, you can reach me on Twitter or check my website!",
            "content_html": "<p>Probably one of the classicals problems you will face when doing a 2D game, or a 2D game engine, is: “How to make a sprite sheet?”.</p><p>A sprite sheet, or a tile sheet, or a texture atlas, or whatever fancy name kids nowadays use, is basically a texture where you are interested in rendering just some parts of it, you don’t want to present the texture in its entirety, just a little piece of it. There are performance motivation behind it, of course, creating and binding textures is expensive, so reusing a texture is a good thing, but there is also a productivity aspect to it, working on a tilesheet that is just one file is easier than working on 30 different files, but that’s not today’s topic.</p><p>Image credits goes to <a href=\"https://www.kenney.nl\">Kenney</a>, whose assets I’ve been using to test and implement this feature (and all other features).</p><p>Now brace yourselves because we will be looking at a lot of <strong>code</strong>.</p><h2 id=\"where-do-we-start\">Where do we start?</h2><p>When doing the famous OpenGL boilerplate (which is a lot of work, really), you will end up with something on these lines:</p><p>A float array that will represent the vertices positions and texture coordinates on your shader.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">vertices</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\t<span class=\"c1\">// positions  // texture coords</span>\t <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>  <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span>   <span class=\"c1\">// top right</span>\t <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span>   <span class=\"c1\">// bottom right</span>\t<span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span>   <span class=\"c1\">// bottom left</span>\t<span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>  <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span>    <span class=\"c1\">// top left </span><span class=\"p\">}</span></code></pre></div></div><p>And then you will bind the array like…</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">glGenBuffers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m_VertexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBindBuffer</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">m_VertexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBufferData</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">_numVerts</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">_vertPropertiesCount</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)),</span> <span class=\"n\">_verts</span><span class=\"p\">,</span> <span class=\"n\">GL_STATIC_DRAW</span><span class=\"p\">);</span><span class=\"c1\">// position attribute</span><span class=\"n\">glVertexAttribPointer</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">GL_FLOAT</span><span class=\"p\">,</span> <span class=\"n\">GL_FALSE</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"n\">glEnableVertexAttribArray</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"c1\">// texture coords</span><span class=\"n\">glVertexAttribPointer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">GL_FLOAT</span><span class=\"p\">,</span> <span class=\"n\">GL_FALSE</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)));</span><span class=\"n\">glEnableVertexAttribArray</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"n\">glGenBuffers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m_IndexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBindBuffer</span><span class=\"p\">(</span><span class=\"n\">GL_ELEMENT_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">m_IndexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBufferData</span><span class=\"p\">(</span><span class=\"n\">GL_ELEMENT_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">_numIndices</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span><span class=\"p\">),</span> <span class=\"n\">_indices</span><span class=\"p\">,</span> <span class=\"n\">GL_STATIC_DRAW</span><span class=\"p\">);</span></code></pre></div></div><h2 id=\"what-we-have-to-change-to-draw-parts-of-a-texture\">What we have to change to draw parts of a texture?</h2><p>And this is all fine, but when you want to draw small pieces of a big texture, what you want to change is the texture coordinates, texture coordinates are uv coordinates that ranges from (0, 0) to (1, 1), and you have to find the small piece of the texture you want within that range.</p><p>This usually will involve some math like this:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">spriteWidth</span> <span class=\"o\">=</span> <span class=\"mf\">48.0</span><span class=\"n\">f</span><span class=\"p\">;</span><span class=\"kt\">float</span> <span class=\"n\">spriteHeight</span> <span class=\"o\">=</span> <span class=\"mf\">48.0</span><span class=\"n\">f</span><span class=\"p\">;</span><span class=\"kt\">float</span> <span class=\"n\">tw</span> <span class=\"o\">=</span> <span class=\"n\">spriteWidth</span> <span class=\"o\">/</span> <span class=\"n\">texture</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWidth</span><span class=\"p\">();</span><span class=\"kt\">float</span> <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">spriteHeight</span> <span class=\"o\">/</span> <span class=\"n\">texture</span><span class=\"o\">-&gt;</span><span class=\"n\">GetHeight</span><span class=\"p\">();</span><span class=\"kt\">int</span> <span class=\"n\">xPosition</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"kt\">int</span> <span class=\"n\">yPosition</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"kt\">float</span> <span class=\"n\">NewTexCoords</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\t<span class=\"p\">(</span><span class=\"n\">xPosition</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">tw</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">yPosition</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">th</span><span class=\"p\">,</span>\t<span class=\"p\">(</span><span class=\"n\">xPosition</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">tw</span><span class=\"p\">,</span> <span class=\"n\">yPosition</span> <span class=\"o\">*</span> <span class=\"n\">th</span><span class=\"p\">,</span>\t<span class=\"n\">xPosition</span> <span class=\"o\">*</span> <span class=\"n\">tw</span> <span class=\"p\">,</span> <span class=\"n\">yPosition</span> <span class=\"o\">*</span> <span class=\"n\">th</span><span class=\"p\">,</span>\t<span class=\"n\">xPosition</span> <span class=\"o\">*</span> <span class=\"n\">tw</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">yPosition</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">th</span><span class=\"p\">};</span></code></pre></div></div><p>And then, boom! You have your new texture coordinates! But as you might see there is still one problem to solve, or one question to ask, if you may wish to frame it like that. <strong>How will I dynamically set the texture coordinates?!</strong> - That’s where I got lost for a good time.</p><p>And the solution is simple, really, and it is comprised of two steps.</p><ol>  <li>We have to separate vertex position and texture coordinates.</li></ol><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">vertices</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\t <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>  <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>\t <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>\t<span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>\t<span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">,</span>  <span class=\"mf\">0.5</span><span class=\"n\">f</span><span class=\"p\">};</span><span class=\"kt\">float</span> <span class=\"n\">texCoords</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\t<span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span>\t<span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span>\t<span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span>\t<span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">};</span></code></pre></div></div><p>Binding them won’t be much different though, you will end up with a new buffer, and one more variable to keep track of.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">glGenBuffers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m_VertexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBindBuffer</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">m_VertexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBufferData</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">_numVerts</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">_vertPropertiesCount</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)),</span> <span class=\"n\">_verts</span><span class=\"p\">,</span> <span class=\"n\">GL_STATIC_DRAW</span><span class=\"p\">);</span><span class=\"c1\">// position attribute</span><span class=\"n\">glVertexAttribPointer</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">GL_FLOAT</span><span class=\"p\">,</span> <span class=\"n\">GL_FALSE</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"n\">glEnableVertexAttribArray</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"n\">glGenBuffers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m_TexCoordsBufferID</span><span class=\"p\">);</span><span class=\"n\">glBindBuffer</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">m_TexCoordsBufferID</span><span class=\"p\">);</span><span class=\"n\">glBufferData</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">_numVerts</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">_vertPropertiesCount</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)),</span> <span class=\"n\">_texCoords</span><span class=\"p\">,</span> <span class=\"n\">GL_STATIC_DRAW</span><span class=\"p\">);</span><span class=\"c1\">// texture coords</span><span class=\"n\">glVertexAttribPointer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">GL_FLOAT</span><span class=\"p\">,</span> <span class=\"n\">GL_FALSE</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"n\">glEnableVertexAttribArray</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"n\">glGenBuffers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">m_IndexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBindBuffer</span><span class=\"p\">(</span><span class=\"n\">GL_ELEMENT_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">m_IndexBufferID</span><span class=\"p\">);</span><span class=\"n\">glBufferData</span><span class=\"p\">(</span><span class=\"n\">GL_ELEMENT_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">_numIndices</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span><span class=\"p\">),</span> <span class=\"n\">_indices</span><span class=\"p\">,</span> <span class=\"n\">GL_STATIC_DRAW</span><span class=\"p\">);</span></code></pre></div></div><p>It’s worth noting that the vertex shader didn’t change at all!</p><p>Now, it’s time for the grande finale! With these data properly separated, all you have to do is change the data on the texture coordinates buffer!</p><p><strong>Should I use glBufferData again?!</strong> No! Let’s take a peek at <em>documentation</em>, shall we? <a href=\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBufferData.xhtml\">glBufferData</a> tells us the following:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>While creating the new storage, any pre-existing data store is deleted. The new data store is created with the specified size in bytes and usage. If data is not NULL, the data store is initialized with data from this pointer.</code></pre></div></div><p>Creating a new storage? deleting pre-existing data store? Sounds like a bit too much when we just want to move some floats around, right?</p><p>That’s where <a href=\"https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBufferSubData.xhtml\">glBufferSubData</a> kicks in, and its documentation tell us:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>When replacing the entire data store, consider using glBufferSubData rather than completely recreating the data store with glBufferData. This avoids the cost of reallocating the data store.</code></pre></div></div><p>Avoiding the cost of reallocating data? That sounds like something we want to do!</p><p>So changing the data on our Texture Coordinates buffer is as simple as:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">glBindBuffer</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"n\">m_TexCoordsBufferID</span><span class=\"p\">);</span><span class=\"n\">glBufferSubData</span><span class=\"p\">(</span><span class=\"n\">GL_ARRAY_BUFFER</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"nf\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)),</span> <span class=\"n\">_texCoords</span><span class=\"p\">);</span></code></pre></div></div><p>And with that I was finally able to get an individual sprite on a spritesheet, and with some extra magic, I was finally able to render a map imported from Tiled!</p><p><img src=\"/images/techblog/opengl_spritesheet_1.png\" alt=\"Tilemap Example\" /></p><p>If you have read so far into this, thank you! I lost a good amount of time wrapping my head around this issue and had trouble figuring out the step of dynamically setting <em>just</em> the texture coordinates. If you are feeling venturous enough, you want to give feedback, you can reach me on <a href=\"http://twitter.com/guilhermepo2\">Twitter</a> or check my <a href=\"http://gueepo.me/\">website</a>!</p>",
            "url": "https://gueepo.me/2021/05/01/spritesheets-with-opengl",
            "image": "/images/techblog/opengl_spritesheets.png",
            
            
            "tags": ["game-engine","opengl"],
            
            "date_published": "2021-05-01T13:00:00+02:00",
            "date_modified": "2021-05-01T13:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2021/02/27/maps-or-unordered-maps",
            "title": "In which I talk about std::unordered_map",
            "summary": null,
            "content_text": "In my last post I talked about doing multiple animations in an Animated Sprite Component, and for that I’ve used std::map.Like this:std::map&lt;std::string, AnimationClip*&gt; m_AnimationList;And since the last post I’ve been thinking: “I didn’t give much thought to std::unordered_map, maybe I should?” - And then here I am looking at the differences between a map and an unordered map.Hint: Since I’m using a string as the key, I don’t care about order, and not doing something is more time-efficient than doing something, so I’m going into this expecting that an unordered map is what I want.Time to read some documentation!Unordered map is an associative container that contains key-value pairs with unique keys. Search, insertion, and removal of elements have average constant-time complexity.Average constant-time complexity? I like that!Digging deeper, what exactly is the cost of accessing an element? (i.e. std::unordered_map&lt;Key,T,Hash,KeyEqual,Allocator&gt;::operator[]) and what we find is: Average case: constant, worst case: linear in size.Interesting. So the next question is, What is the worst-case? It seems that the worst case happens when you try to access a key that is not on the map, which results in an insertion. The documentation is kind enough to recommend us to look at the function at(), which throws an exception when the key is not found. Yikes.Now here is the engine design question of the day: If we use operator[] and the game tries to play an animation that doesn’t exist, what happens? A new “Animation” will be created (and that’s not what we want) and we won’t know that animation didn’t exist! (and that’s not what we want!) - But I guess this is a problem for future me, unordered maps sounds good for me now.Looking at the std::map documentation we find a more straight-forward answer for the time-complexity on std::map&lt;Key,T,Compare,Allocator&gt;::operator[] which happens to be Logarithmic in the size of the container.And we know that 1 (one) is smaller than log(n)!So how do we change from a map to an unordered map? Well, they were both designed to do the same things and solve the same problems, but in different ways, so luckily their function signatures and everything is the same, so the only change needed was changing from std::map&lt;std::string, AnimationClip*&gt; m_AnimationList; to std::unordered_map&lt;std::string, AnimationClip*&gt; m_AnimationList; and we have our lovely pirate running again!Follow me on twitter!!",
            "content_html": "<p>In my last post I talked about doing multiple animations in an Animated Sprite Component, and for that I’ve used <code class=\"language-plaintext highlighter-rouge\">std::map</code>.</p><p>Like this:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">AnimationClip</span><span class=\"o\">*&gt;</span> <span class=\"n\">m_AnimationList</span><span class=\"p\">;</span></code></pre></div></div><p>And since the last post I’ve been thinking: <em>“I didn’t give much thought to <code class=\"language-plaintext highlighter-rouge\">std::unordered_map</code>, maybe I should?”</em> - And then here I am looking at the differences between a map and an unordered map.</p><p><strong>Hint:</strong> Since I’m using a string as the key, I don’t care about order, and not doing something is more time-efficient than doing something, so I’m going into this expecting that an unordered map is what I want.</p><p>Time to read some documentation!</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Unordered map is an associative container that contains key-value pairs with unique keys. Search, insertion, and removal of elements have average constant-time complexity.</code></pre></div></div><p>Average constant-time complexity? I like that!</p><p>Digging deeper, what exactly is the cost of accessing an element? (i.e. <code class=\"language-plaintext highlighter-rouge\">std::unordered_map&lt;Key,T,Hash,KeyEqual,Allocator&gt;::operator[]</code>) and what we find is: <code class=\"language-plaintext highlighter-rouge\">Average case: constant, worst case: linear in size.</code></p><p>Interesting. So the next question is, <em>What</em> is the worst-case? It seems that the worst case happens when you try to access a key that is not on the map, which results in an insertion. The documentation is kind enough to recommend us to look at the function <code class=\"language-plaintext highlighter-rouge\">at()</code>, which throws an exception when the key is not found. Yikes.</p><p>Now here is the engine design question of the day: If we use <code class=\"language-plaintext highlighter-rouge\">operator[]</code> and the game tries to play an animation that doesn’t exist, what happens? A new “Animation” will be created (and that’s not what we want) and we won’t know that animation didn’t exist! (and that’s not what we want!) - But I guess this is a problem for future me, unordered maps sounds good for me now.</p><p>Looking at the <code class=\"language-plaintext highlighter-rouge\">std::map</code> documentation we find a more straight-forward answer for the time-complexity on <code class=\"language-plaintext highlighter-rouge\">std::map&lt;Key,T,Compare,Allocator&gt;::operator[]</code> which happens to be <code class=\"language-plaintext highlighter-rouge\">Logarithmic in the size of the container.</code></p><p>And we know that 1 (one) is smaller than log(n)!</p><p>So how do we change from a map to an unordered map? Well, they were both designed to do the same things and solve the same problems, but in different ways, so luckily their function signatures and everything is the same, so the only change needed was changing from <code class=\"language-plaintext highlighter-rouge\">std::map&lt;std::string, AnimationClip*&gt; m_AnimationList;</code> to <code class=\"language-plaintext highlighter-rouge\">std::unordered_map&lt;std::string, AnimationClip*&gt; m_AnimationList;</code> and we have our lovely pirate running again!</p><p><img src=\"/images/cppmeditations/r2d_runanimation2.gif\" alt=\"run animation\" /></p><p>Follow me on <a href=\"https://twitter.com/guilhermepo2\">twitter</a>!!</p>",
            "url": "https://gueepo.me/2021/02/27/maps-or-unordered-maps",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2021-02-27T19:20:00+01:00",
            "date_modified": "2021-02-27T19:20:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2021/02/21/std-maps-cpp",
            "title": "In which I talk about std::map",
            "summary": null,
            "content_text": "I’ve dabbled with std::map(s) in C++ already, yes. But for some reason it just never sticks, so here I am writing a tad bit about it in hopes I will remember it better this time ?!Here’s the problem: When making a 2D game, often times you want to be able to have multiple types of animation on a component, and play a specific animation under specific gameplay conditions. But I didn’t have that!Since I already mentioned std::map, the solution presents itself as std::map&lt;std::string, AnimationClip*&gt; m_AnimationList.Now the question is: How to add and retrieve content from the map?Luckily, adding something to a std::map is as simple as a function call.void AddAnimationClip(std::string AnimationName, AnimationClip* Clip) { m_AnimationList.emplace(AnimationName, Clip); }And here’s how I retrieve a specific Animation Clip:AnimationClip* GetAnimationClip(std::string ClipID) {\tif (m_AnimationList.count(ClipID) != 0) {\t\treturn m_AnimationList[ClipID];\t}}And finally, to play an animation I just have a pointer to the current animation being played, and that’s where all the logic and sprites come from: m_CurrentAnimation = m_AnimationList[AnimationName].Now, it’s beyond this short post to talk about unordered maps, whether you should be using strings as a key or not, so maybe in the future I can briefly bring that up?!",
            "content_html": "<p>I’ve dabbled with std::map(s) in C++ already, yes. But for some reason it just never sticks, so here I am writing a tad bit about it in hopes I will remember it better this time ?!</p><p>Here’s the problem: When making a 2D game, often times you want to be able to have multiple types of animation on a component, and play a specific animation under specific gameplay conditions. But I didn’t have that!</p><p>Since I already mentioned <code class=\"language-plaintext highlighter-rouge\">std::map</code>, the solution presents itself as <code class=\"language-plaintext highlighter-rouge\">std::map&lt;std::string, AnimationClip*&gt; m_AnimationList</code>.</p><p>Now the question is: How to add and retrieve content from the map?</p><p>Luckily, adding something to a <code class=\"language-plaintext highlighter-rouge\">std::map</code> is as simple as a function call.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">AddAnimationClip</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">AnimationName</span><span class=\"p\">,</span> <span class=\"n\">AnimationClip</span><span class=\"o\">*</span> <span class=\"n\">Clip</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">m_AnimationList</span><span class=\"p\">.</span><span class=\"n\">emplace</span><span class=\"p\">(</span><span class=\"n\">AnimationName</span><span class=\"p\">,</span> <span class=\"n\">Clip</span><span class=\"p\">);</span> <span class=\"p\">}</span></code></pre></div></div><p>And here’s how I retrieve a specific Animation Clip:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AnimationClip</span><span class=\"o\">*</span> <span class=\"nf\">GetAnimationClip</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">ClipID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">m_AnimationList</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">ClipID</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"n\">m_AnimationList</span><span class=\"p\">[</span><span class=\"n\">ClipID</span><span class=\"p\">];</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>And finally, to play an animation I just have a pointer to the current animation being played, and that’s where all the logic and sprites come from: <code class=\"language-plaintext highlighter-rouge\">m_CurrentAnimation = m_AnimationList[AnimationName]</code>.</p><p><img src=\"/images/cppmeditations/r2d_runanimation2.gif\" alt=\"run animation\" /></p><p>Now, it’s beyond this short post to talk about unordered maps, whether you should be using strings as a key or not, so maybe in the future I can briefly bring that up?!</p>",
            "url": "https://gueepo.me/2021/02/21/std-maps-cpp",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2021-02-21T13:20:00+01:00",
            "date_modified": "2021-02-21T13:20:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2021/02/15/nearest-neighbor-opengl",
            "title": "Nearest Neighbor filtering in OpenGL textures",
            "summary": null,
            "content_text": "For some context, I am developing a lightweight 2D game engine, realiti2D, as a fun experiment - And recently I decided to take the next step and start making a game on it, I feel like by doing a game I can get a better grasp on what needs to be added to the engine and I can have a better sense of workflow to decide which tools I will want to make.But when loading a gorgeous pixel art pirate character, this is what I saw:Oh no, that’s not what I want.I’ve seen this problem too many times in multiple different places and I know that this is a matter of using linear texture filtering when I want to use nearest neighbor filtering instead. So this raises the question: “Where do I change that?”And this is what I found right when a new texture is loaded into the engine:glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);Wait! You might say, “right when a new texture is loaded?” - Why, yes, this is also something that was made clear to me during this process. The function glTexParameter* acts on the currently bound texture, so it makes sense to set these parameters as the texture is loaded.But anyway, there is a GL_LINEAR there! That’s what I want to change, right? After some googling on OpenGL documentation, I found that the constant for nearest neighbor is GL_NEAREST.glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);So this is how it looks now:Perfect!Also, shoutout to Pixel Frog for making the amazing art at the Treasure Hunters asset.",
            "content_html": "<p>For some context, I am developing a lightweight 2D game engine, <a href=\"https://github.com/guilhermepo2/realiti2D\">realiti2D</a>, as a fun experiment - And recently I decided to take the next step and start making a game on it, I feel like by doing a game I can get a better grasp on what needs to be added to the engine and I can have a better sense of workflow to decide which tools I will want to make.</p><p>But when loading a gorgeous pixel art pirate character, this is what I saw:</p><p><img src=\"/images/cppmeditations/filter_linear.png\" alt=\"Linear Filter\" /></p><p>Oh no, that’s <strong>not</strong> what I want.</p><p>I’ve seen this problem too many times in multiple different places and I know that this is a matter of using linear texture filtering when I want to use nearest neighbor filtering instead. So this raises the question: <em>“Where do I change that?”</em></p><p>And this is what I found right when a new texture is loaded into the engine:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">glTexParameteri</span><span class=\"p\">(</span><span class=\"n\">GL_TEXTURE_2D</span><span class=\"p\">,</span> <span class=\"n\">GL_TEXTURE_MIN_FILTER</span><span class=\"p\">,</span> <span class=\"n\">GL_LINEAR</span><span class=\"p\">);</span><span class=\"n\">glTexParameteri</span><span class=\"p\">(</span><span class=\"n\">GL_TEXTURE_2D</span><span class=\"p\">,</span> <span class=\"n\">GL_TEXTURE_MAG_FILTER</span><span class=\"p\">,</span> <span class=\"n\">GL_LINEAR</span><span class=\"p\">);</span></code></pre></div></div><p><strong>Wait!</strong> You might say, “right when a new texture is loaded?” - Why, yes, this is also something that was made clear to me during this process. The function glTexParameter* acts on the currently bound texture, so it makes sense to set these parameters as the texture is loaded.</p><p>But anyway, there is a <strong>GL_LINEAR</strong> there! That’s what I want to change, right? After some googling on OpenGL documentation, I found that the constant for nearest neighbor is <strong>GL_NEAREST</strong>.</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">glTexParameteri</span><span class=\"p\">(</span><span class=\"n\">GL_TEXTURE_2D</span><span class=\"p\">,</span> <span class=\"n\">GL_TEXTURE_MIN_FILTER</span><span class=\"p\">,</span> <span class=\"n\">GL_NEAREST</span><span class=\"p\">);</span><span class=\"n\">glTexParameteri</span><span class=\"p\">(</span><span class=\"n\">GL_TEXTURE_2D</span><span class=\"p\">,</span> <span class=\"n\">GL_TEXTURE_MAG_FILTER</span><span class=\"p\">,</span> <span class=\"n\">GL_NEAREST</span><span class=\"p\">);</span></code></pre></div></div><p>So this is how it looks now:</p><p><img src=\"/images/cppmeditations/filter_nearest.png\" alt=\"Nearest Neighbor Filter\" /></p><p>Perfect!</p><p>Also, shoutout to Pixel Frog for making the amazing art at the <a href=\"https://pixelfrog-store.itch.io/treasure-hunters\">Treasure Hunters</a> asset.</p>",
            "url": "https://gueepo.me/2021/02/15/nearest-neighbor-opengl",
            "image": "/images/cppmeditations/cppmeditations.png",
            
            
            
            
            "date_published": "2021-02-15T13:53:00+01:00",
            "date_modified": "2021-02-15T13:53:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2020/03/15/setting-up-libtcod-visual-studio-2019",
            "title": "Setting up Libtcod on Visual Studio 2019",
            "summary": null,
            "content_text": "Image credits goes to Josh Ge’s post “How to Make a Roguelike”.IntroductionSome time ago I got to know about the 7DRL and I wanted to take part on it. As I was browsing r/roguelikedev I got to see that there was a tutorial in C++ using libtcod - I thought with myself that this method could be a good starting point, but the set up seemed outdated for Windows, althought functional and good enough for Linux and OS X. Using Visual Studio can solve a lot of the incoveniences of having to set up the way you have to on Linux/OS X - I have to say, not needing to set up makefiles or cmake is nice. If you are one those (like me) that enjoys knowing exactly what is going on, compiling on command line is interesting, but it eventually gets old, and you don’t want to deal with that when using Windows.With all that being said, a lot of the game industry runs on Windows and Visual Studio, and on C++! So might as well start those practices already. If your intent is just to make a roguelike, there’s not really a huge reason to go with C++ - But if you just want to learn the language, or want to eventually be in the AAA Game Industry, or know that you will need the extra memory management and performance, then you should try C++.Setting it UpThis will be just a simple step-by-step process.  First of all, you have to have Visual Studio 2019 installed in your computer, duh.  After that, you have to download libtcod on their release page - As the day of this writing, 1.15.1 is the most recent stable version - you have to download the “msvc” version of the release, which stands for Microsoft Visual C++, and then you have x86 (32 bits) and x86_64 (64 bits) - I’m going with the 64 bits version, the entire filename is “libtcod-1.15.1-x86_64-msvc.zip”.  Next step is simply creating a new Empty Project with Visual Studio 2019. After that we can get our feets wet!  First thing, set your debug environment to x64 (or x86 if that’s the version you downloaded).  You will need to add the include files from libtcod into your project, the way I do this usually is by having the entire libtcod folder in my project. To do that, I like creating a “lib” folder and then simply putting the entire “libtcod-1.15.1-x86_640-msvc” folder inside of it.  You have to copy some files from the libtcod folder to the root of your project (the root is the folder where the “.vcxproj” is located at), those files are on the root folder for libtcode, these are the files: “libtcod.dll”, “libtcod.exp”, “libtcod.lib”, “libtcod.pdb”, “SDL2.dll”, “terminal.png”.  Now we have to tell Visual Studio to look at the directories we need and to search for the libraries we need!  Right-click on your project solution and click on “Properties”.  Search for the option “VC++ Directories” &gt; “Include Directories” and add the “include” folder inside libtcod.  Search for “Linker” &gt; “Input” &gt; “Additional Dependencies” and add “libtcod.lib” to it.That’s all you need to do! After doing all that, here is a simple sanity test code to see if it works!#include \"libtcod.hpp\"int main() {    TCODConsole::initRoot(80, 50, \"libtcod C++ tutorial\", false);    while (!TCODConsole::isWindowClosed()) {        TCOD_key_t key;        TCODSystem::checkForEvent(TCOD_EVENT_KEY_PRESS, &amp;key, NULL);        TCODConsole::root-&gt;clear();        TCODConsole::root-&gt;putChar(40, 25, '@');        TCODConsole::flush();    }    return 0;}This should be result:Well, that’s it for the post, I just wanted to show the way I go about setting up libtcod, I hope this help someone in some way so you can start creating your own roguelikes in C++!If you are feeling venturous enough, you can reach me on Twitter or check my website!",
            "content_html": "<p>Image credits goes to Josh Ge’s post <a href=\"https://www.gamasutra.com/blogs/JoshGe/20181029/329512/How_to_Make_a_Roguelike.php\">“How to Make a Roguelike”</a>.</p><h2 id=\"introduction\">Introduction</h2><p>Some time ago I got to know about the <a href=\"https://7drl.com/\">7DRL</a> and I wanted to take part on it. As I was browsing <a href=\"https://www.reddit.com/r/roguelikedev/\">r/roguelikedev</a> I got to see that <a href=\"http://www.roguebasin.com/index.php?title=Complete_roguelike_tutorial_using_C%2B%2B_and_libtcod_-_part_1:_setting_up\">there was a tutorial in C++ using libtcod</a> - I thought with myself that this method could be a good starting point, but the set up seemed outdated for Windows, althought functional and good enough for Linux and OS X. Using Visual Studio can solve a lot of the incoveniences of having to set up the way you have to on Linux/OS X - I have to say, not needing to set up makefiles or cmake is nice. If you are one those (like me) that enjoys knowing exactly what is going on, compiling on command line is interesting, but it eventually gets old, and you don’t want to deal with that when using Windows.</p><p>With all that being said, a lot of the game industry runs on Windows and Visual Studio, and on C++! So might as well start those practices already. If your intent is just to make a roguelike, there’s not really a huge reason to go with C++ - But if you just want to learn the language, or want to eventually be in the AAA Game Industry, or know that you will need the extra memory management and performance, then you should try C++.</p><h2 id=\"setting-it-up\">Setting it Up</h2><p>This will be just a simple step-by-step process.</p><ol>  <li>First of all, you have to have <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio 2019</a> installed in your computer, duh.</li>  <li>After that, you have to <a href=\"https://github.com/libtcod/libtcod\">download libtcod</a> on their <a href=\"https://github.com/libtcod/libtcod/releases\">release page</a> - As the day of this writing, 1.15.1 is the most recent stable version - you have to download the “msvc” version of the release, which stands for <em>Microsoft Visual C++</em>, and then you have x86 (32 bits) and x86_64 (64 bits) - I’m going with the 64 bits version, the entire filename is “libtcod-1.15.1-x86_64-msvc.zip”.</li>  <li>Next step is simply creating a new Empty Project with Visual Studio 2019. After that we can get our feets wet!</li>  <li>First thing, set your debug environment to x64 (or x86 if that’s the version you downloaded).</li></ol><p><img src=\"/images/techblog/libtcodsetup/x64.png\" alt=\"x64\" /></p><ol>  <li>You will need to add the include files from libtcod into your project, the way I do this usually is by having the entire libtcod folder in my project. To do that, I like creating a <em>“lib”</em> folder and then simply putting the entire <em>“libtcod-1.15.1-x86_640-msvc”</em> folder inside of it.</li>  <li>You have to copy some files from the libtcod folder to the root of your project (the root is the folder where the “.vcxproj” is located at), those files are on the root folder for libtcode, these are the files: <em>“libtcod.dll”</em>, <em>“libtcod.exp”</em>, <em>“libtcod.lib”</em>, <em>“libtcod.pdb”</em>, <em>“SDL2.dll”</em>, <em>“terminal.png”</em>.</li>  <li>Now we have to tell Visual Studio to look at the directories we need and to search for the libraries we need!</li>  <li>Right-click on your project solution and click on “Properties”.</li></ol><p><img src=\"/images/techblog/libtcodsetup/properties.png\" alt=\"Properties\" /></p><ol>  <li>Search for the option <em>“VC++ Directories”</em> &gt; <em>“Include Directories”</em> and add the <em>“include”</em> folder inside libtcod.</li>  <li>Search for <em>“Linker”</em> &gt; <em>“Input”</em> &gt; <em>“Additional Dependencies”</em> and add <em>“libtcod.lib”</em> to it.</li></ol><p>That’s all you need to do! After doing all that, here is a simple sanity test code to see if it works!</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include \"libtcod.hpp\"</span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">TCODConsole</span><span class=\"o\">::</span><span class=\"n\">initRoot</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s\">\"libtcod C++ tutorial\"</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">);</span>    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">TCODConsole</span><span class=\"o\">::</span><span class=\"n\">isWindowClosed</span><span class=\"p\">())</span> <span class=\"p\">{</span>        <span class=\"n\">TCOD_key_t</span> <span class=\"n\">key</span><span class=\"p\">;</span>        <span class=\"n\">TCODSystem</span><span class=\"o\">::</span><span class=\"n\">checkForEvent</span><span class=\"p\">(</span><span class=\"n\">TCOD_EVENT_KEY_PRESS</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>        <span class=\"n\">TCODConsole</span><span class=\"o\">::</span><span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">clear</span><span class=\"p\">();</span>        <span class=\"n\">TCODConsole</span><span class=\"o\">::</span><span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">putChar</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"sc\">'@'</span><span class=\"p\">);</span>        <span class=\"n\">TCODConsole</span><span class=\"o\">::</span><span class=\"n\">flush</span><span class=\"p\">();</span>    <span class=\"p\">}</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>This should be result:</p><p><img src=\"/images/techblog/libtcodsetup/result.png\" alt=\"Result\" /></p><p>Well, that’s it for the post, I just wanted to show the way I go about setting up libtcod, I hope this help someone in some way so you can start creating your own roguelikes in C++!</p><p>If you are feeling venturous enough, you can reach me on <a href=\"http://twitter.com/guilhermepo2\">Twitter</a> or check my <a href=\"http://gueepo.me/\">website</a>!</p>",
            "url": "https://gueepo.me/2020/03/15/setting-up-libtcod-visual-studio-2019",
            "image": "/images/techblog/roguelike-thumbnail.png",
            
            
            "tags": ["roguelike","game-development"],
            
            "date_published": "2020-03-15T12:00:00+01:00",
            "date_modified": "2020-03-15T12:00:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2020/02/14/player-blocking-using-the-dot-product",
            "title": "Player Blocking using the Dot Product",
            "summary": null,
            "content_text": "IntroductionEveryone knows that 3D Math is important for game development, specially gameplay programming, A very common concept is the dot product, and when searching for it, there is a big lack of concrete examples on where this can be applied, and when you find one, it’s always the same old “How do I know when an enemy is looking at the player?” - On that topic, I wanted to create a series of blog posts, every time I use the dot product, or any 3D Math concept really, I would create a quick and short blog post describing what I wanted to achieve, and how I achieved it.This is a not blog post about what is the dot product, you can perform a quick google search to find its mathematical definition and interpretation, this is a quick post about using the dot product in a gameplay mechanic.The ProblemSuppose that we have enemies that shoot projectiles against our player, but to defend against them, we want our player to have a shield that they can use to defend against projectiles. When the player is blocking, how do you know if the shield is in between the player and the projectile? i.e. How do you know the player is actually blocking?Why you don’t… Just check if the projectile hit the shield? - Well, usually we don’t really want the shield to have collision, because we don’t want it to collide with the environment or other objects. In other scenario, maybe the shield collision is a little bit off, so it can come off as unfair to the player or maybe it will feel like the player wasn’t really blocking.Solving the problem in theory: In theory, you just have to check for the projectile velocity against the player forward vector - the projectile velocity will tell you the direction the projectile is going towards, and the player’s forward will tell us which direction the player is facing. The ideal situation will give us -1 as a result, which means the player is looking directly to the projectile, and, when the shield is raised, the player will block it.The ImplementationThe first thing to check on the implementation, is whether the player is really blocking, this boolean variable is toggled via the Block input, which is activated by the player. Following that, we calculate the dot product of the projectile’s normalized velocity and the player forward vector, and check if it’s between -1.0 and -0.8, if true, the projectile was blocked, if false, the player still takes damage.Why normalize the velocity? - When calculating the dot product of two normalized vectors (the forward is already normalized), you guarantee the result will be between -1.0 and 1.0, so it’s easier to understand the resulting value, in case of not normalized vectors, you can obtain higehr numbers as a possible outcome, and we wouldn’t really know what that means.Why check if the value is between -1.0 and -0.8? - The player will rarely be looking at the exact opposite direction as the projectile, the enemy can shoot from weird angles and the player can rotate to weird angles, in most cases when the player is looking directly at the enemy, the result will be around -0.95 - We add some margin to that value, so players can have a little bit of an advantage when blocking.That’s it for this quick adventure on dot product in gameplay mechanics!If you are feeling venturous enough, you can reach me on Twitter or check my website!",
            "content_html": "<h2 id=\"introduction\">Introduction</h2><p>Everyone knows that 3D Math is important for game development, specially gameplay programming, A very common concept is the dot product, and when searching for it, there is a big lack of concrete examples on where this can be applied, and when you find one, it’s always the same old “How do I know when an enemy is looking at the player?” - On that topic, I wanted to create a series of blog posts, every time I use the dot product, or any 3D Math concept really, I would create a quick and short blog post describing what I wanted to achieve, and how I achieved it.</p><p>This is a not blog post about what is the dot product, you can perform a quick google search to find its mathematical definition and interpretation, this is a quick post about using the dot product in a gameplay mechanic.</p><h2 id=\"the-problem\">The Problem</h2><p><img src=\"/images/techblog/dot_product_yhis.png\" alt=\"Dot Product\" /></p><p>Suppose that we have enemies that shoot projectiles against our player, but to defend against them, we want our player to have a shield that they can use to defend against projectiles. When the player is blocking, how do you know if the shield is in between the player and the projectile? i.e. How do you know the player is actually blocking?</p><p><strong>Why you don’t…</strong> Just check if the projectile hit the shield? - Well, usually we don’t really want the shield to have collision, because we don’t want it to collide with the environment or other objects. In other scenario, maybe the shield collision is a little bit off, so it can come off as unfair to the player or maybe it will feel like the player wasn’t really blocking.</p><p><strong>Solving the problem in theory:</strong> In theory, you just have to check for the projectile velocity against the player forward vector - the projectile velocity will tell you the direction the projectile is going towards, and the player’s forward will tell us which direction the player is facing. The ideal situation will give us <strong>-1</strong> as a result, which means the player is looking directly to the projectile, and, when the shield is raised, the player will block it.</p><h2 id=\"the-implementation\">The Implementation</h2><p><img src=\"/images/techblog/blueprint_dot_shield.jpg\" alt=\"Implementation\" /></p><p>The first thing to check on the implementation, is whether the player is really blocking, this boolean variable is toggled via the Block input, which is activated by the player. Following that, we calculate the dot product of the projectile’s normalized velocity and the player forward vector, and check if it’s between <strong>-1.0</strong> and <strong>-0.8</strong>, if true, the projectile was blocked, if false, the player still takes damage.</p><p><strong>Why normalize the velocity?</strong> - When calculating the dot product of two normalized vectors (the forward is already normalized), you guarantee the result will be between <strong>-1.0</strong> and <strong>1.0</strong>, so it’s easier to understand the resulting value, in case of not normalized vectors, you can obtain higehr numbers as a possible outcome, and we wouldn’t really know what that means.</p><p><strong>Why check if the value is between -1.0 and -0.8?</strong> - The player will rarely be looking at the exact opposite direction as the projectile, the enemy can shoot from weird angles and the player can rotate to weird angles, in most cases when the player is looking directly at the enemy, the result will be around <strong>-0.95</strong> - We add some margin to that value, so players can have a little bit of an advantage when blocking.</p><p>That’s it for this quick adventure on dot product in gameplay mechanics!</p><p>If you are feeling venturous enough, you can reach me on <a href=\"http://twitter.com/guilhermepo2\">Twitter</a> or check my <a href=\"http://gueepo.me/\">website</a>!</p>",
            "url": "https://gueepo.me/2020/02/14/player-blocking-using-the-dot-product",
            "image": "/images/techblog/blueprint_dot_shield.jpg",
            
            
            
            
            "date_published": "2020-02-14T12:00:00+01:00",
            "date_modified": "2020-02-14T12:00:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2019/07/03/simple-state-machines",
            "title": "Coding a simple State Machine",
            "summary": null,
            "content_text": "This blog post is my simple take on State Machines and how I usually use them in my projects, specially in games made in Unity. The image on the header is from another article on the same subject that I consider to be more complete and better explained, I highly recommend you to read the article: State Pattern - If you still want to read my take and how I approach it, keep reading!Have you ever heard of State Machines? It is one of those weird cryptical words that appears in Computer Science, Computer Programming, Game Programming and a lot places really! When you try to research it you probably will find out about plenty of mathematical concepts, but none of those conjunct notation or math theory and hypothesis stuff will answer your basic question: “How do I create a state machine in my code?”In the long run, State Machines are really benefical for your code, have you ever stumbled upon a problem where you got yourself creating multiple booleans to keep track of what was happening? And you had to debug all those values and code that shouldn’t be executed is executing and the biggest problem is that you can’t guarantee stability in your code, you just know that pieces of code shouldn’t be running and even though the result might work, you feel deep down that it is something built on a weak foundation.This is a post mainly about Game Programming, because hey, that’s my job. But State Machines are theoretical models, so maybe you can find something useful here if you are a mathematician, computer scientist, a programmer which is not a game programmer or just interested in the topic. If you have a science background, you might get mad of my oversimplification later on though, but that’s how we do things. shrugBut what is a State Machine?The Mathematical ModelAccording to Wikipedia, a State Machine, also known as Finite-State Machine (FSM) or Finite Automaton is “a mathematical model of computation, an abstract machine that can be in exactly one of a finite number of states at any given time, it changes from one state to another in response to some external inputs, this is called a state transition”.Yikes!A Finite-State Machine is mathematically defined as a list of states, an initial state and a set of rules or conditions for EVERY transition (keep this in mind because it will be important).That’s some mathemtical lingo right there, Finite-State Machines are, putting it more straightforward, a mathematical model designed to compute things, a state machine is also known as an automata, and you may have heard of a famous automata called the Turing Machine. The Turing Machine is another model of computation that claims to be able to solve any problem that can be described as a recursively enumerable language. That’s cool and stuff, in practice a Turing Machine is a Finite-State machine with infinite memory and the ability to go back and forth on the memory. It is also known as “your computer” (not really, but close enough).The Simplified VersionAlthough Finite-State Machines and Automatas are something complex enough for you to have a whole semester dedicated to them, its essence, and what really matters to incorporating one in our code, can be simplified into a couple paragraphs.A Finite-State Machine is a list of states, an initial state and the rules for transitions between states. That’s pretty much it.Its purpose is to isolate pieces of code from one another, for example, in a simple platformer game, you want to have separate code for when the player is grounded and when the player is on air, these are your states: “Player Grounded” and “Player on Air”, the initial state is Grounded and the rules are:  Grounded -&gt; Jumping: If the player pressed to jump.  Jumping -&gt; Grounded: If the player touches the ground.It is easy to see how the state machine helps us in this context too, if you don’t have it, you have to check if the player is grounded to jump, otherwise the player could keep jumping on air. Although this is a very simple sitation and you could solve that with creating a simple isGrounded variable, you have to recognize that (1) creating this variable IS a form of creating a very simple state machine and (2) this is a VERY simple problem, try adding wall slide on your game, wall jump, dialogue breaks, cutscenes and watch your player controller script fall apart with bugs and bad performance if you haven’t planned well. Believe me, I’ve been there way too many times.State Machines are good for isolating code, but not only that, they can scale, they make it easier to add new features on your script without breaking everything else, which really is what matters on long term projects.How to Code One?Let’s recapitulate what we actually need for having a state machine.  We have to define a list of states  We have to define an initial state  We have to define transitions between states.Defining the StatesI, personally, like to do that using enums and I honestly believe this is the best way to go, you can use enum for your states and process then with a current state variable and a switch-case structure. For this example I’m going to pretend I am programming a 2D platformer with wall jump and that the jump from the wall is different from the regular jump, so these would be my states:public enum EPlayerState {    Grounded,    Jumping,    OnWall,    JumpingFromWall}We have our states, but we also need to keep track of our current state, this can be done with a simple variable.private EPlayerState m_currentPlayerState;Defining an Initial StateThis one is the easiest, the player will start grounded, so it should start on the grounded state, you can do that when declaring the variable or just setting it on the Start function.void Start() {    m_currentPlayerState = EPlayerState.Grounded;}Defining the transtionsThis is where it gets tricky, you need to handle every state individually and make sure that each state has a condition that will lead to another state, avoiding termination problems. To handle the states, I usually have a switch-case structure on my Update() method that would look like this:switch(m_currentPlayerState) {    case EPlayerState.Grounded:        GroundedState();        break;    case EPlayerState.Jumping:        JumpingState();        break;    case EPlayerState.OnWall:        OnWallState();        break;    case EPlayerState.JumpingFromWall:        JumpingFromWallState();        break;}Every state now has their own specific function, nothing is stopping you from putting everything just there on the switch-case, it is just a matter of organization. All you have to do now is create each function to handle the specifics of each state and transition to other states!Grounded State:private void GroundedState() {    // grounded specifics    if(playerJump) {        // jump...        m_currentPlayerState = EPlayerState.Jumping;    }}Jumping State:private void JumpingState() {    // jumping specifics...    if(isGrounded) {        m_currentPlayerState = EPlayerState.Grounded;    } else if(collidingWithWalls &amp;&amp; playerJump) {        m_currentPlayerState = EPlayerState.JumpingFromWall;    } else if(collidingWithWalls) {        m_currentPlayerState = EPlayerState.OnWall;    }}On Wall State:private void OnWallState() {    // on wall specifics...    if(playerJump) {        m_currentPlayerState = EPlayerState.JumpingFromWall;    } else if(isGrounded) {        m_currentPlayerState = EPlayerState.Grounded;    }}Jumping From Wall State:private void JumpingFromWallState() {    // jumping from wall specifics...     if(isGrounded) {        m_currentPlayerState = EPlayerState.Grounded;    }}Sample CodeThis is the entirety of a simple state machine code I’ve written as a base for this post:using System.Collections;using System.Collections.Generic;using UnityEngine;public class SampleStateMachine : MonoBehaviour {    // using enum to name our states    public enum EPlayerState {        Grounded,        Jumping,        OnWall,        JumpingFromWall,    }    private EPlayerState m_currentPlayerState;    // random variables to keep the code readable lol    private bool playerJump;    private bool isGrounded;    private bool collidingWithWalls;    void Start() {        m_currentPlayerState = EPlayerState.Grounded;    }    void Update() {        // common code for all states goes here...        // handling the current state        switch(m_currentPlayerState) {            case EPlayerState.Grounded:                GroundedState();                break;            case EPlayerState.Jumping:                JumpingState();                break;            case EPlayerState.OnWall:                OnWallState();                break;            case EPlayerState.JumpingFromWall:                JumpingFromWallState();                break;        }        // mess with x velocity        // do stuff with y velocity        // player.Move();    }    // Functions for each state    // each state handles its own specific things and transitioning to other states    private void GroundedState() {        // grounded specifics...        if(playerJump) {            m_currentPlayerState = EPlayerState.Jumping;        }    }    private void JumpingState() {        // jumping specifics...        if(isGrounded) {            m_currentPlayerState = EPlayerState.Grounded;        } else if(collidingWithWalls &amp;&amp; playerJump) {            m_currentPlayerState = EPlayerState.JumpingFromWall;        } else if(collidingWithWalls) {            m_currentPlayerState = EPlayerState.OnWall;        }    }    private void OnWallState() {        // on wall specifics...        if(playerJump) {            m_currentPlayerState = EPlayerState.JumpingFromWall;        } else if(isGrounded) {            m_currentPlayerState = EPlayerState.Grounded;        }    }    private void JumpingFromWallState() {        // jumping from wall specifics...         if(isGrounded) {            m_currentPlayerState = EPlayerState.Grounded;        }    }}So that was me trying to explain Finite State Machines! I’ve tried to give some mathematical insight, some simplified explanation and go on about how I pesonally use them in my daily stuff as a game programmerIf you are feeling venturous enough, you can reach me on Twitter or check my own game studio, Fourth Dimension.",
            "content_html": "<p>This blog post is my simple take on State Machines and how I usually use them in my projects, specially in games made in Unity. The image on the header is from another article on the same subject that I consider to be more complete and better explained, I highly recommend you to read the article: <a href=\"https://gameprogrammingpatterns.com/state.html\">State Pattern</a> - If you still want to read my take and how I approach it, keep reading!</p><p>Have you ever heard of State Machines? It is one of those weird cryptical words that appears in Computer Science, Computer Programming, Game Programming and a lot places really! When you try to research it you probably will find out about plenty of mathematical concepts, but none of those conjunct notation or math theory and hypothesis stuff will answer your basic question: “How do I create a state machine in my code?”</p><p>In the long run, State Machines are really benefical for your code, have you ever stumbled upon a problem where you got yourself creating multiple booleans to keep track of what was happening? And you had to debug all those values and code that shouldn’t be executed is executing and the biggest problem is that you can’t guarantee stability in your code, you just know that pieces of code shouldn’t be running and even though the result might work, you feel deep down that it is something built on a weak foundation.</p><p>This is a post mainly about Game Programming, because hey, that’s my job. But State Machines are theoretical models, so maybe you can find something useful here if you are a mathematician, computer scientist, a programmer which is not a game programmer or just interested in the topic. If you have a science background, you might get mad of my oversimplification later on though, but that’s how we do things. <em>shrug</em></p><h2 id=\"but-what-is-a-state-machine\">But what is a State Machine?</h2><h3 id=\"the-mathematical-model\">The Mathematical Model</h3><p>According to Wikipedia, a State Machine, also known as Finite-State Machine (FSM) or Finite Automaton is “a mathematical model of computation, an abstract machine that can be in exactly one of a finite number of states at any given time, it changes from one state to another in response to some external inputs, this is called a state transition”.</p><p>Yikes!</p><p>A Finite-State Machine is mathematically defined as a list of states, an initial state and a set of rules or conditions for EVERY transition (keep this in mind because it will be important).</p><p>That’s some mathemtical lingo right there, Finite-State Machines are, putting it more straightforward, a mathematical model designed to compute things, a state machine is also known as an automata, and you may have heard of a famous automata called the <em>Turing Machine</em>. The Turing Machine is another model of computation that claims to be able to solve any problem that can be described as a recursively enumerable language. That’s cool and stuff, in practice a Turing Machine is a Finite-State machine with infinite memory and the ability to go back and forth on the memory. It is also known as “your computer” (not really, but close enough).</p><h3 id=\"the-simplified-version\">The Simplified Version</h3><p>Although Finite-State Machines and Automatas are something complex enough for you to have a whole semester dedicated to them, its essence, and what really matters to incorporating one in our code, can be simplified into a couple paragraphs.</p><p>A Finite-State Machine is a list of states, an initial state and the rules for transitions between states. That’s pretty much it.</p><p>Its purpose is to isolate pieces of code from one another, for example, in a simple platformer game, you want to have separate code for when the player is grounded and when the player is on air, these are your states: “Player Grounded” and “Player on Air”, the initial state is Grounded and the rules are:</p><ul>  <li>Grounded -&gt; Jumping: If the player pressed to jump.</li>  <li>Jumping -&gt; Grounded: If the player touches the ground.</li></ul><p>It is easy to see how the state machine helps us in this context too, if you don’t have it, you have to check if the player is grounded to jump, otherwise the player could keep jumping on air. Although this is a very simple sitation and you could solve that with creating a simple <code class=\"language-plaintext highlighter-rouge\">isGrounded</code> variable, you have to recognize that (1) creating this variable <strong>IS</strong> a form of creating a very simple state machine and (2) this is a VERY simple problem, try adding wall slide on your game, wall jump, dialogue breaks, cutscenes and watch your player controller script fall apart with bugs and bad performance if you haven’t planned well. Believe me, I’ve been there way too many times.</p><p>State Machines are good for isolating code, but not only that, they can scale, they make it easier to add new features on your script without breaking everything else, which really is what matters on long term projects.</p><h2 id=\"how-to-code-one\">How to Code One?</h2><p>Let’s recapitulate what we actually need for having a state machine.</p><ol>  <li>We have to define a list of states</li>  <li>We have to define an initial state</li>  <li>We have to define transitions between states.</li></ol><h3 id=\"defining-the-states\">Defining the States</h3><p>I, personally, like to do that using <code class=\"language-plaintext highlighter-rouge\">enums</code> and I honestly believe this is the best way to go, you can use <code class=\"language-plaintext highlighter-rouge\">enum</code> for your states and process then with a current state variable and a switch-case structure. For this example I’m going to pretend I am programming a 2D platformer with wall jump and that the jump from the wall is different from the regular jump, so these would be my states:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">EPlayerState</span> <span class=\"p\">{</span>    <span class=\"n\">Grounded</span><span class=\"p\">,</span>    <span class=\"n\">Jumping</span><span class=\"p\">,</span>    <span class=\"n\">OnWall</span><span class=\"p\">,</span>    <span class=\"n\">JumpingFromWall</span><span class=\"p\">}</span></code></pre></div></div><p>We have our states, but we also need to keep track of our current state, this can be done with a simple variable.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"n\">EPlayerState</span> <span class=\"n\">m_currentPlayerState</span><span class=\"p\">;</span></code></pre></div></div><h3 id=\"defining-an-initial-state\">Defining an Initial State</h3><p>This one is the easiest, the player will start grounded, so it should start on the grounded state, you can do that when declaring the variable or just setting it on the Start function.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">void</span> <span class=\"nf\">Start</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"defining-the-transtions\">Defining the transtions</h3><p>This is where it gets tricky, you need to handle every state individually and make sure that each state has a condition that will lead to another state, avoiding termination problems. To handle the states, I usually have a switch-case structure on my <code class=\"language-plaintext highlighter-rouge\">Update()</code> method that would look like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">m_currentPlayerState</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">:</span>        <span class=\"nf\">GroundedState</span><span class=\"p\">();</span>        <span class=\"k\">break</span><span class=\"p\">;</span>    <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Jumping</span><span class=\"p\">:</span>        <span class=\"nf\">JumpingState</span><span class=\"p\">();</span>        <span class=\"k\">break</span><span class=\"p\">;</span>    <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">OnWall</span><span class=\"p\">:</span>        <span class=\"nf\">OnWallState</span><span class=\"p\">();</span>        <span class=\"k\">break</span><span class=\"p\">;</span>    <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">JumpingFromWall</span><span class=\"p\">:</span>        <span class=\"nf\">JumpingFromWallState</span><span class=\"p\">();</span>        <span class=\"k\">break</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>Every state now has their own specific function, nothing is stopping you from putting everything just there on the switch-case, it is just a matter of organization. All you have to do now is create each function to handle the specifics of each state and transition to other states!</p><p>Grounded State:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">GroundedState</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// grounded specifics</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">playerJump</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"c1\">// jump...</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Jumping</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Jumping State:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">JumpingState</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// jumping specifics...</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">isGrounded</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">collidingWithWalls</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">playerJump</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">JumpingFromWall</span><span class=\"p\">;</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">collidingWithWalls</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">OnWall</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>On Wall State:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">OnWallState</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// on wall specifics...</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">playerJump</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">JumpingFromWall</span><span class=\"p\">;</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">isGrounded</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Jumping From Wall State:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">JumpingFromWallState</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">// jumping from wall specifics... </span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">isGrounded</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"sample-code\">Sample Code</h2><p>This is the entirety of a simple state machine code I’ve written as a base for this post:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"nn\">System.Collections</span><span class=\"p\">;</span><span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span><span class=\"k\">using</span> <span class=\"nn\">UnityEngine</span><span class=\"p\">;</span><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">SampleStateMachine</span> <span class=\"p\">:</span> <span class=\"n\">MonoBehaviour</span> <span class=\"p\">{</span>    <span class=\"c1\">// using enum to name our states</span>    <span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">EPlayerState</span> <span class=\"p\">{</span>        <span class=\"n\">Grounded</span><span class=\"p\">,</span>        <span class=\"n\">Jumping</span><span class=\"p\">,</span>        <span class=\"n\">OnWall</span><span class=\"p\">,</span>        <span class=\"n\">JumpingFromWall</span><span class=\"p\">,</span>    <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"n\">EPlayerState</span> <span class=\"n\">m_currentPlayerState</span><span class=\"p\">;</span>    <span class=\"c1\">// random variables to keep the code readable lol</span>    <span class=\"k\">private</span> <span class=\"kt\">bool</span> <span class=\"n\">playerJump</span><span class=\"p\">;</span>    <span class=\"k\">private</span> <span class=\"kt\">bool</span> <span class=\"n\">isGrounded</span><span class=\"p\">;</span>    <span class=\"k\">private</span> <span class=\"kt\">bool</span> <span class=\"n\">collidingWithWalls</span><span class=\"p\">;</span>    <span class=\"k\">void</span> <span class=\"nf\">Start</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">void</span> <span class=\"nf\">Update</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c1\">// common code for all states goes here...</span>        <span class=\"c1\">// handling the current state</span>        <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">m_currentPlayerState</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">:</span>                <span class=\"nf\">GroundedState</span><span class=\"p\">();</span>                <span class=\"k\">break</span><span class=\"p\">;</span>            <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Jumping</span><span class=\"p\">:</span>                <span class=\"nf\">JumpingState</span><span class=\"p\">();</span>                <span class=\"k\">break</span><span class=\"p\">;</span>            <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">OnWall</span><span class=\"p\">:</span>                <span class=\"nf\">OnWallState</span><span class=\"p\">();</span>                <span class=\"k\">break</span><span class=\"p\">;</span>            <span class=\"k\">case</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">JumpingFromWall</span><span class=\"p\">:</span>                <span class=\"nf\">JumpingFromWallState</span><span class=\"p\">();</span>                <span class=\"k\">break</span><span class=\"p\">;</span>        <span class=\"p\">}</span>        <span class=\"c1\">// mess with x velocity</span>        <span class=\"c1\">// do stuff with y velocity</span>        <span class=\"c1\">// player.Move();</span>    <span class=\"p\">}</span>    <span class=\"c1\">// Functions for each state</span>    <span class=\"c1\">// each state handles its own specific things and transitioning to other states</span>    <span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">GroundedState</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c1\">// grounded specifics...</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">playerJump</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Jumping</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">JumpingState</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c1\">// jumping specifics...</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">isGrounded</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">collidingWithWalls</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">playerJump</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">JumpingFromWall</span><span class=\"p\">;</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">collidingWithWalls</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">OnWall</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">OnWallState</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c1\">// on wall specifics...</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">playerJump</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">JumpingFromWall</span><span class=\"p\">;</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">isGrounded</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">JumpingFromWallState</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"c1\">// jumping from wall specifics... </span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">isGrounded</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">m_currentPlayerState</span> <span class=\"p\">=</span> <span class=\"n\">EPlayerState</span><span class=\"p\">.</span><span class=\"n\">Grounded</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>So that was me trying to explain Finite State Machines! I’ve tried to give some mathematical insight, some simplified explanation and go on about how I pesonally use them in my daily stuff as a game programmer</p><p>If you are feeling venturous enough, you can reach me on <a href=\"http://twitter.com/guilhermepo2\">Twitter</a> or check my own game studio, <a href=\"https://fourthdimension.studio\">Fourth Dimension</a>.</p>",
            "url": "https://gueepo.me/2019/07/03/simple-state-machines",
            "image": "/images/techblog/stateMachineWorkflow.png",
            
            
            
            
            "date_published": "2019-07-03T13:00:00+02:00",
            "date_modified": "2019-07-03T13:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2019/04/07/screenshake-unity-2",
            "title": "Even better Screenshake in Unity!",
            "summary": null,
            "content_text": "Some months ago I wrote about doing Screenshake in Unity, and now I’m writing about an even better way to make Screenshake in Unity! I will just repeat the beggining of the other post here now.First things first, if you don’t know what is the JUICE, I feel sorry for you. There is a moment, in every game developer’s life, where they get to meet the JUICE. It is, for sure, a life changing moment. That being said, if you don’t know what is the JUICE you probably have already thought: “My game is bad and I don’t know why” or “My game has a fun mechanic but is bad, why?” - The answer to all your thoughts and problems probably are: THE JUICE!.Watch Juice it or Lose It and The Art of Screenshake and watch your games improve in 100% just by watching a couple lectures!A new addition to these lectures is Math for Game Programmers: Juicing your Camera with Math - which is a veeery nice talk!Cool! What do I need?After months of iterating to achieve the optimal screenshake I reached the following formula: have a GameObject to hold two cameras, yes, two cameras. We don’t want to shake the same camera we use to follow our player or show game events.Why not? You might ask! Well, we would need to write extra code to make sure the camera would effectively return to its intended position, and it’s not always trivial and very error-prone, so having a second camera to mirror the intended position and add the shake to it is a better approach in my opinion.PS1: I’m joking about it being the optimal screenshake - it probably has lots of room for improvement and feel free to reach me if you have a tip for it!PS2: You can find the code I use here.Let’s talk code!Variablespublic enum EShakeStyle {    Horizontal,    Vertical,    Angular,    Directional,    All}First thing is that I use this enum so I can have control over what kind of shake I want, the names pretty much say by themselves. Horizontal and Vertical shake only on one axis and Angular messes with the camera rotation. Directional messes with both axis and All messes with everything!// The Main Camera, the one who won't shake (probably the one following the player, has its own Script)public Camera mainCamera;// Shake Camera, the reason this is a different camera is because we don't want to mess with the real camera position, so we won't have to do extra code to make sure the camera return to its original position.public Camera screenshakeCamera;Following that, I have the reference to the main camera and the screen shake camera, I like having them as public variables so I can just drag and drop on the Editor.// For Angular Screenshakeprivate const float maxAngle = .5f;// For Directional Screenshakeprivate const float maxOffset = .5f;private float m_cameraTrauma;private EShakeStyle m_shakeStyle;private Coroutine shakeRoutine;Here is where things get interesting, we have the variables to limit how much our rotational and directional shake can be and some control variables!The Entry Point!public void AddTraumaToCamera(float amount, EShakeStyle style) {    SetShakeStyle(style);    AddTraumaToCamera(amount);}The entry point is just adding trauma to the camera, I don’t like using a “Begin Screenshake” functionality, I’m a simple man, if trauma bigger than 0, we shake, if not, we not shake.SetShakeStyle(EShakeStyle shakeStyle) is a very simple function that will just attribute whatever shakeStyle was passed to the current shakeStyle.On the other hand, AddTraumaToCamera(float amount) has some interesting things happening.public void AddTraumaToCamera(float amount) {    if(m_cameraTrauma &lt;= 0) {        screenshakeCamera.transform.position = mainCamera.transform.position;        screenshakeCamera.enabled = true;        mainCamera.enabled = false;        m_cameraTrauma = amount;    } else {        m_cameraTrauma += amount;    }    if(shakeRoutine == null) {        shakeRoutine = StartCoroutine(ShakeRoutine());    }}We either set the trauma or add to it, according to the camera’s previous state. Attention! We only initialize the ShakeRoutine if we are not currently executing it! If the screen is already shaking everything will work correctly by just adding to the trauma!An important part is where I deactivate the main camera and activate the screenshake camera, this guarantees that the screenshake camera is the one doing the rendering.And then we finally get to our glorious ShakeRoutine()!private IEnumerator ShakeRoutine() {    while(m_cameraTrauma &gt; 0) {        m_cameraTrauma -= Time.deltaTime;        screenshakeCamera.transform.position = mainCamera.transform.position;                float angle = maxAngle * (m_cameraTrauma * m_cameraTrauma) * Random.Range(-1f, 1f);        float offsetX = maxOffset * (m_cameraTrauma * m_cameraTrauma) * Random.Range(-1f, 1f);        float offsetY = maxOffset * (m_cameraTrauma * m_cameraTrauma) * Random.Range(-1f, 1f);        ShakeWithStyle(new Vector2(offsetX, offsetY), angle);        yield return null;    }    screenshakeCamera.enabled = false;    mainCamera.enabled = true;    shakeRoutine = null;}This, my friends, is where the real magic happens. I got some good insights from the Math for Game Programmers talk about camera, we have the trauma decaying linearly with Time.deltaTime and our shake is actually quadratic according to m_cameraTrauma.Another important thing is that before calculating any variable, we set the screenshakeCamera position to the same as mainCamera position. Even with the mainCamera disabled its script is working so the shakeCamera always gets the most updated position of the camera!What is happening here is that values for the angle and offset to be added to the camera are being calculated, and it is a very simple math: (m_cameraTrauma * m_cameraTrauma) * Random.Range(-1f, 1f) - this will gives us any value anywhere in between [-m_cameraTrauma ^2, m_cameraTrauma ^2].Did you realize how beautiful this is? More trauma, more shake! More trauma, more time shaking!The m_cameraTrauma * m_cameraTrauma part of the equation is important because it creates a more smooth shake, reducing the risks of motion sickness and achieving a better feel overall!But you might be asking yourself, what about ShakeWithStyle(Vector2 offset, float angle)?This function only executes a switch case on the current shake style and calls ShakeDirectional(Vector2 offset) and ShakeRotational(float angle) if needed. Here are these two functions:private void ShakeDirectional(Vector2 offset) {    Vector3 t_position = screenshakeCamera.transform.position;    t_position.x += offset.x;    t_position.y += offset.y;    screenshakeCamera.transform.position = t_position;}private void ShakeRotational(float offset) {    Vector3 t_rotation = screenshakeCamera.transform.localEulerAngles;    t_rotation.z += offset;    screenshakeCamera.transform.localEulerAngles = t_rotation;}We just add to our Screenshake Camera, all the magic is performed on the Shake Routine. Always remember you can see the whole code here!And this is how I’m currently doing Screenshake in Unity!I know these kind of posts might not be the most interesting since I’m mainly walking you through a piece of code, but I think it is really important to share these tips with everyone! So I’m trying.Have a good day and always remember the JUICE!If you are feeling venturous enough, you can follow me on Twitter or check my own game studio, Fourth Dimension.",
            "content_html": "<p>Some months ago I wrote about doing Screenshake in Unity, and now I’m writing about an even better way to make Screenshake in Unity! I will just repeat the beggining of the other post here now.</p><p>First things first, if you don’t know what is the <strong>JUICE</strong>, I feel sorry for you. There is a moment, in every game developer’s life, where they get to meet the <strong>JUICE</strong>. It is, for sure, a life changing moment. That being said, if you don’t know what is the <strong>JUICE</strong> you probably have already thought: “My game is bad and I don’t know why” or “My game has a fun mechanic but is bad, why?” - The answer to all your thoughts and problems probably are: <strong>THE JUICE</strong>!.</p><p>Watch <a href=\"https://www.youtube.com/watch?v=Fy0aCDmgnxg\">Juice it or Lose It</a> and <a href=\"https://www.youtube.com/watch?v=AJdEqssNZ-U\">The Art of Screenshake</a> and watch your games improve in 100% just by watching a couple lectures!</p><p>A new addition to these lectures is <a href=\"https://www.youtube.com/watch?v=tu-Qe66AvtY\">Math for Game Programmers: Juicing your Camera with Math</a> - which is a veeery nice talk!</p><h2 id=\"cool-what-do-i-need\">Cool! What do I need?</h2><p>After months of iterating to achieve the <strong>optimal screenshake</strong> I reached the following formula: have a GameObject to hold <em>two cameras</em>, yes, two cameras. We don’t want to shake the same camera we use to follow our player or show game events.</p><p>Why not? You might ask! Well, we would need to write extra code to make sure the camera would effectively return to its intended position, and it’s not always trivial and very error-prone, so having a second camera to mirror the intended position and add the shake to it is a better approach in my opinion.</p><p><strong>PS1:</strong> I’m joking about it being the <em>optimal screenshake</em> - it probably has lots of room for improvement and feel free to reach me if you have a tip for it!<strong>PS2:</strong> <a href=\"https://github.com/fourthdimensionstudio/UnityScripts/blob/master/Utilities/MonoBehaviors/CameraHolder.cs\">You can find the code I use here</a>.</p><h2 id=\"lets-talk-code\">Let’s talk code!</h2><p><strong>Variables</strong></p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">enum</span> <span class=\"n\">EShakeStyle</span> <span class=\"p\">{</span>    <span class=\"n\">Horizontal</span><span class=\"p\">,</span>    <span class=\"n\">Vertical</span><span class=\"p\">,</span>    <span class=\"n\">Angular</span><span class=\"p\">,</span>    <span class=\"n\">Directional</span><span class=\"p\">,</span>    <span class=\"n\">All</span><span class=\"p\">}</span></code></pre></div></div><p>First thing is that I use this enum so I can have control over what kind of shake I want, the names pretty much say by themselves. Horizontal and Vertical shake only on one axis and Angular messes with the camera rotation. Directional messes with <em>both</em> axis and All messes with <strong>everything!</strong></p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// The Main Camera, the one who won't shake (probably the one following the player, has its own Script)</span><span class=\"k\">public</span> <span class=\"n\">Camera</span> <span class=\"n\">mainCamera</span><span class=\"p\">;</span><span class=\"c1\">// Shake Camera, the reason this is a different camera is because we don't want to mess with the real camera position, so we won't have to do extra code to make sure the camera return to its original position.</span><span class=\"k\">public</span> <span class=\"n\">Camera</span> <span class=\"n\">screenshakeCamera</span><span class=\"p\">;</span></code></pre></div></div><p>Following that, I have the reference to the main camera and the screen shake camera, I like having them as public variables so I can just drag and drop on the Editor.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// For Angular Screenshake</span><span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">maxAngle</span> <span class=\"p\">=</span> <span class=\"p\">.</span><span class=\"m\">5f</span><span class=\"p\">;</span><span class=\"c1\">// For Directional Screenshake</span><span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">maxOffset</span> <span class=\"p\">=</span> <span class=\"p\">.</span><span class=\"m\">5f</span><span class=\"p\">;</span><span class=\"k\">private</span> <span class=\"kt\">float</span> <span class=\"n\">m_cameraTrauma</span><span class=\"p\">;</span><span class=\"k\">private</span> <span class=\"n\">EShakeStyle</span> <span class=\"n\">m_shakeStyle</span><span class=\"p\">;</span><span class=\"k\">private</span> <span class=\"n\">Coroutine</span> <span class=\"n\">shakeRoutine</span><span class=\"p\">;</span></code></pre></div></div><p>Here is where things get interesting, we have the variables to limit how much our rotational and directional shake can be and some control variables!</p><p><strong>The Entry Point!</strong></p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">AddTraumaToCamera</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"n\">EShakeStyle</span> <span class=\"n\">style</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nf\">SetShakeStyle</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"p\">);</span>    <span class=\"nf\">AddTraumaToCamera</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>The entry point is just adding trauma to the camera, I don’t like using a “Begin Screenshake” functionality, I’m a simple man, if trauma bigger than 0, we shake, if not, we not shake.</p><p><code class=\"language-plaintext highlighter-rouge\">SetShakeStyle(EShakeStyle shakeStyle)</code> is a very simple function that will just attribute whatever shakeStyle was passed to the current shakeStyle.</p><p>On the other hand, <code class=\"language-plaintext highlighter-rouge\">AddTraumaToCamera(float amount)</code> has some interesting things happening.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">AddTraumaToCamera</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">amount</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">m_cameraTrauma</span> <span class=\"p\">&lt;=</span> <span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">position</span> <span class=\"p\">=</span> <span class=\"n\">mainCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">position</span><span class=\"p\">;</span>        <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">enabled</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">;</span>        <span class=\"n\">mainCamera</span><span class=\"p\">.</span><span class=\"n\">enabled</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">;</span>        <span class=\"n\">m_cameraTrauma</span> <span class=\"p\">=</span> <span class=\"n\">amount</span><span class=\"p\">;</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>        <span class=\"n\">m_cameraTrauma</span> <span class=\"p\">+=</span> <span class=\"n\">amount</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">shakeRoutine</span> <span class=\"p\">==</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">shakeRoutine</span> <span class=\"p\">=</span> <span class=\"nf\">StartCoroutine</span><span class=\"p\">(</span><span class=\"nf\">ShakeRoutine</span><span class=\"p\">());</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>We either set the trauma or add to it, according to the camera’s previous state. <strong>Attention!</strong> We only initialize the ShakeRoutine if we are not currently executing it! If the screen is already shaking everything will work correctly by just adding to the trauma!</p><p>An important part is where I <strong>deactivate</strong> the main camera and <strong>activate</strong> the screenshake camera, this guarantees that the screenshake camera is the one doing the rendering.</p><p>And then we finally get to our glorious <code class=\"language-plaintext highlighter-rouge\">ShakeRoutine()</code>!</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"n\">IEnumerator</span> <span class=\"nf\">ShakeRoutine</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">m_cameraTrauma</span> <span class=\"p\">&gt;</span> <span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">m_cameraTrauma</span> <span class=\"p\">-=</span> <span class=\"n\">Time</span><span class=\"p\">.</span><span class=\"n\">deltaTime</span><span class=\"p\">;</span>        <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">position</span> <span class=\"p\">=</span> <span class=\"n\">mainCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">position</span><span class=\"p\">;</span>                <span class=\"kt\">float</span> <span class=\"n\">angle</span> <span class=\"p\">=</span> <span class=\"n\">maxAngle</span> <span class=\"p\">*</span> <span class=\"p\">(</span><span class=\"n\">m_cameraTrauma</span> <span class=\"p\">*</span> <span class=\"n\">m_cameraTrauma</span><span class=\"p\">)</span> <span class=\"p\">*</span> <span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(-</span><span class=\"m\">1f</span><span class=\"p\">,</span> <span class=\"m\">1f</span><span class=\"p\">);</span>        <span class=\"kt\">float</span> <span class=\"n\">offsetX</span> <span class=\"p\">=</span> <span class=\"n\">maxOffset</span> <span class=\"p\">*</span> <span class=\"p\">(</span><span class=\"n\">m_cameraTrauma</span> <span class=\"p\">*</span> <span class=\"n\">m_cameraTrauma</span><span class=\"p\">)</span> <span class=\"p\">*</span> <span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(-</span><span class=\"m\">1f</span><span class=\"p\">,</span> <span class=\"m\">1f</span><span class=\"p\">);</span>        <span class=\"kt\">float</span> <span class=\"n\">offsetY</span> <span class=\"p\">=</span> <span class=\"n\">maxOffset</span> <span class=\"p\">*</span> <span class=\"p\">(</span><span class=\"n\">m_cameraTrauma</span> <span class=\"p\">*</span> <span class=\"n\">m_cameraTrauma</span><span class=\"p\">)</span> <span class=\"p\">*</span> <span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(-</span><span class=\"m\">1f</span><span class=\"p\">,</span> <span class=\"m\">1f</span><span class=\"p\">);</span>        <span class=\"nf\">ShakeWithStyle</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">Vector2</span><span class=\"p\">(</span><span class=\"n\">offsetX</span><span class=\"p\">,</span> <span class=\"n\">offsetY</span><span class=\"p\">),</span> <span class=\"n\">angle</span><span class=\"p\">);</span>        <span class=\"k\">yield</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"p\">;</span>    <span class=\"p\">}</span>    <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">enabled</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">;</span>    <span class=\"n\">mainCamera</span><span class=\"p\">.</span><span class=\"n\">enabled</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">;</span>    <span class=\"n\">shakeRoutine</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p><strong>This</strong>, my friends, is where the real magic happens. I got some good insights from the Math for Game Programmers talk about camera, we have the trauma decaying linearly with <code class=\"language-plaintext highlighter-rouge\">Time.deltaTime</code> and our shake is actually quadratic according to <code class=\"language-plaintext highlighter-rouge\">m_cameraTrauma</code>.</p><p>Another important thing is that before calculating any variable, we set the screenshakeCamera position to the same as mainCamera position. Even with the mainCamera disabled its script is working so the shakeCamera always gets the most updated position of the camera!</p><p>What is happening here is that values for the angle and offset to be added to the camera are being calculated, and it is a very simple math: <code class=\"language-plaintext highlighter-rouge\">(m_cameraTrauma * m_cameraTrauma) * Random.Range(-1f, 1f)</code> - this will gives us any value anywhere in between <code class=\"language-plaintext highlighter-rouge\">[-m_cameraTrauma ^2, m_cameraTrauma ^2]</code>.</p><p>Did you realize how beautiful this is? More trauma, more shake! More trauma, more time shaking!</p><p>The <code class=\"language-plaintext highlighter-rouge\">m_cameraTrauma * m_cameraTrauma</code> part of the equation is important because it creates a more smooth shake, reducing the risks of motion sickness and achieving a better feel overall!</p><p>But you might be asking yourself, what about <code class=\"language-plaintext highlighter-rouge\">ShakeWithStyle(Vector2 offset, float angle)</code>?</p><p>This function only executes a switch case on the current shake style and calls <code class=\"language-plaintext highlighter-rouge\">ShakeDirectional(Vector2 offset)</code> and <code class=\"language-plaintext highlighter-rouge\">ShakeRotational(float angle)</code> if needed. Here are these two functions:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">ShakeDirectional</span><span class=\"p\">(</span><span class=\"n\">Vector2</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"n\">Vector3</span> <span class=\"n\">t_position</span> <span class=\"p\">=</span> <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">position</span><span class=\"p\">;</span>    <span class=\"n\">t_position</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"p\">+=</span> <span class=\"n\">offset</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span>    <span class=\"n\">t_position</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"p\">+=</span> <span class=\"n\">offset</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">;</span>    <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">position</span> <span class=\"p\">=</span> <span class=\"n\">t_position</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"k\">private</span> <span class=\"k\">void</span> <span class=\"nf\">ShakeRotational</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"n\">Vector3</span> <span class=\"n\">t_rotation</span> <span class=\"p\">=</span> <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">localEulerAngles</span><span class=\"p\">;</span>    <span class=\"n\">t_rotation</span><span class=\"p\">.</span><span class=\"n\">z</span> <span class=\"p\">+=</span> <span class=\"n\">offset</span><span class=\"p\">;</span>    <span class=\"n\">screenshakeCamera</span><span class=\"p\">.</span><span class=\"n\">transform</span><span class=\"p\">.</span><span class=\"n\">localEulerAngles</span> <span class=\"p\">=</span> <span class=\"n\">t_rotation</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div></div><p>We just add to our Screenshake Camera, all the magic is performed on the Shake Routine. Always remember you can see the whole code <a href=\"https://github.com/fourthdimensionstudio/UnityScripts/blob/master/Utilities/MonoBehaviors/CameraHolder.cs\">here!</a></p><p>And this is how I’m currently doing Screenshake in Unity!</p><p>I know these kind of posts might not be the most interesting since I’m mainly walking you through a piece of code, but I think it is really important to share these tips with everyone! So I’m trying.</p><p>Have a good day and always remember the <strong>JUICE!</strong></p><p>If you are feeling venturous enough, you can follow me on <a href=\"http://twitter.com/guilhermepo2\">Twitter</a> or check my own game studio, <a href=\"https://fourthdimension.studio\">Fourth Dimension</a>.</p>",
            "url": "https://gueepo.me/2019/04/07/screenshake-unity-2",
            "image": "/images/techblog/theshake2.jpg",
            
            
            
            
            "date_published": "2019-04-07T13:00:00+02:00",
            "date_modified": "2019-04-07T13:00:00+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2018/12/01/what-if-everyone-handles-their-persistence",
            "title": "What if everyone handles their own persistence?",
            "summary": null,
            "content_text": "Persistence is one of those things that I never want to do and always procrastinate. Persistence is basically having data available at all times on software, to not lose your data when you turn it off, to have it back to you when you turn it on and it is really important for games.Hell. I bet you would die if you lost your save state on any game. Those hundreds of hours on your favorite RPG game on Playstation (You have thought of a specific one, haven’t you?).The ContextI was (actually, still am) developing a game called Pizza Clicker. It is an idle incremental game where your goal is to have as much pizza as you can, but the trick is, in order to obtain more pizza, you have to invest pizza. This leads to an endless vicious cycle of spending pizza to earn more pizza.There are basically two ways of leveling up your pizza production efficiency: incrementers and upgrades - Incrementers gives you more pizza per second or more pizza per click, whereas upgrades make a specific incrementer more efficient.As it is a game that consist of accumulating resources, needless to say that persistence is a must on this kind of game. But what needs to be persisted? Basically, how much of each incrementers a player have and what upgrades they have. I started persisting incrementers in a way and halfway through the project I changed how I did it for the upgrades. So basically I’m using different two different logics to persist! Yay!And that’s what I’m going to talk about today.The Centralized WayMy first approach was having everything centralized on some kind of SaveManager. This led me to having two C# files: SaveState.cs, which is simply an object with every single aspect I would ever want to persist. It looks like this:public class SaveState {\tpublic string playerName;\tpublic string lastSavedDate;\tpublic double currentPizzas;\tpublic double pizzasOnLifeTime;\tpublic int cursoreLevel;\tpublic int gennaroLevel;\tpublic int gasOvenLevel;\tpublic int eletricOvenLevel;\tpublic int woodOvenLevel;\tpublic int plasmaOvenLevel;\tpublic int futureOvenLevel;\t}And on another file, called SaveManager.cs, for every variable I have another variable with a string, a persist string, and it is something like this:...// Pizzeriaprivate const string playerName = \"v1_PLAYER_NAME\";private const string lastDate = \"v1_LAST_DATE\";// Pizzasprivate const string currentPizzas = \"v1_CURRENT_PIZZAS\";private const string lifetimePizzas = \"v1_LIFETIMEPIZZAS\";...And finally, for me to save I can do something like this:...// IncrementersPlayerPrefs.SetInt(cursoreLevel, toPersist.cursoreLevel);PlayerPrefs.SetInt(gennaroLevel, toPersist.gennaroLevel);PlayerPrefs.SetInt(gasOvenLevel, toPersist.gasOvenLevel);PlayerPrefs.SetInt(eletricOvenLevel, toPersist.eletricOvenLevel);PlayerPrefs.SetInt(woodOvenLevel, toPersist.woodOvenLevel);PlayerPrefs.SetInt(plasmaOvenLevel, toPersist.plasmaOvenLevel);PlayerPrefs.SetInt(futureOvenLevel, toPersist.futureOvenLevel);...So if I want to restore, I can do it like this:...saveState.cursoreLevel = PlayerPrefs.GetInt(cursoreLevel);saveState.gennaroLevel = PlayerPrefs.GetInt(gennaroLevel);saveState.gasOvenLevel = PlayerPrefs.GetInt(gasOvenLevel);saveState.eletricOvenLevel = PlayerPrefs.GetInt(eletricOvenLevel);saveState.woodOvenLevel = PlayerPrefs.GetInt(woodOvenLevel);saveState.plasmaOvenLevel = PlayerPrefs.GetInt(plasmaOvenLevel);saveState.futureOvenLevel = PlayerPrefs.GetInt(futureOvenLevel);...What if I want to add an Incrementer?If I ever want to add an incrementer (which probably will be the case in a few weeks or months), I just have to follow the following list of tasks:  Plan the incrementer, how much ppc or pps it will give;  Add it to the User Interface with the Incrementer.cs script, all configured;  Go to the SaveState.cs and add the new incrementer there;  Go to the SaveManager.cs and create the string variable for the new incrementer, after that I have to add the new incrementer on the InitFirstTime() function, and then I have to also add it on the GetSaveState() and on PersistState(SaveState state);Needles to say steps 3 and 4 are very prone to error. If I mistaken something along the way the new incrementer can break, players will be upset and it will be bad. Also, if I want to add an incrementer when the game is already on production, I have to write code to migrate the save state from one way to another (i.e. recognize there is no “NewIncrementer” saved and that is because of the new version, so I have to initialize it on the save file with a 0).In other words, to keep working this way, I would also have to work with a MigrateSave() function, which at the moment looks like this:void MigrateSave() {\t// check what version is saved and what is the current version and migrate it.\t// TO DO\treturn; }I want to keep it like this.What If Everyone Handle their own Stuff?I needed to add another feature on Pizza Clicker, the Upgrades, which are similar to how the Incrementers work, but instead of adding to how much pizza you produce, they just improve an Incrementer’s efficiency.When I started, I was like: “Do I have to do all of that again? Create a variable for every upgrade and persist every one of them and migrate and…” - At some point I thought of doing the persistence on each individual Upgrade.When I buy an upgrade, it immediately saves its value as 1. When Initializing the game it checks its own persistenceString and check whether or not it was bought. Looks better, right?To save, I have to create just one more variable on Upgrade.cs, a string which will be used to persist.[Header(\"Persistance Settings\")]public string persistString;And then when initializing the game I can just check like this:if(persistString != null &amp;&amp; persistString != \"\") {\tif(PlayerPrefs.GetInt(persistString) == 1) {\t\tApply();\t}}What is Apply()? You may ask.public void Apply() {\tif(!m_wasBought) {\t\tincrementerToImprove.pizzaPerClick *= (1 + pizzaPerClickImprovement);\t\tincrementerToImprove.pizzaPerSecond *= (1 + pizzaPerSecondImprovement);\t\tPlayerPrefs.SetInt(persistString, 1);\t\tm_wasBought = true;\t\tPizzeria.instance.RecalculatePPCPPS();\t}}To summarize it quickly, the Apply() function is called when the incrementer is bought or when the game is initialized and the persistString exists on the save file.What if I want to add an Upgrade?I will want to add more upgrades as time goes by. To do that I can simply follow this list of tasks:  Plan the upgrade, which incrementer will it affect and how much;  Add it to the User Interface with the Upgrade.cs script, all configured;  Set the persistString attribute to something unique.There is just one point where I can make a mistake here and it is on Step 3, I can simply forget to set the string, which is easily caught on testing. Having only one possible error is way better than 3 or 4.Aaand this is the story of the persistence of Pizza Clicker (download it here!) - I know it’s nothing innovative or whatever, but it was something that happened to me and I wanted to write my thoughts on it.Hope it helps someone somewhere!You can get in contact with me whenever you want if you have any questions, all my social media and email are on my personal website",
            "content_html": "<p>Persistence is one of those things that I never want to do and always procrastinate. Persistence is basically having data available at all times on software, to not lose your data when you turn it off, to have it back to you when you turn it on and it is really important for games.</p><p>Hell. I bet you would die if you lost your save state on any game. Those hundreds of hours on your favorite RPG game on Playstation (You have thought of a specific one, haven’t you?).</p><h2 id=\"the-context\">The Context</h2><p>I was (actually, still am) developing a game called Pizza Clicker. It is an idle incremental game where your goal is to have as much pizza as you can, but the trick is, in order to obtain more pizza, you have to invest pizza. This leads to an endless vicious cycle of spending pizza to earn more pizza.</p><p>There are basically <strong>two ways</strong> of leveling up your pizza production efficiency: <em>incrementers</em> and <em>upgrades</em> - Incrementers gives you more pizza per second or more pizza per click, whereas upgrades make a specific incrementer more efficient.</p><p>As it is a game that consist of accumulating resources, needless to say that persistence is a must on this kind of game. But what needs to be persisted? Basically, <em>how much</em> of each incrementers a player have and <em>what</em> upgrades they have. I started persisting incrementers in a way and halfway through the project I changed how I did it for the upgrades. So basically I’m using different two different logics to persist! Yay!</p><p>And that’s what I’m going to talk about today.</p><h2 id=\"the-centralized-way\">The Centralized Way</h2><p>My first approach was having everything centralized on some kind of SaveManager. This led me to having two C# files: <code class=\"language-plaintext highlighter-rouge\">SaveState.cs</code>, which is simply an object with every single aspect I would ever want to persist. It looks like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">SaveState</span> <span class=\"p\">{</span>\t<span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">playerName</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">lastSavedDate</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">double</span> <span class=\"n\">currentPizzas</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">double</span> <span class=\"n\">pizzasOnLifeTime</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">cursoreLevel</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">gennaroLevel</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">gasOvenLevel</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">eletricOvenLevel</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">woodOvenLevel</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">plasmaOvenLevel</span><span class=\"p\">;</span>\t<span class=\"k\">public</span> <span class=\"kt\">int</span> <span class=\"n\">futureOvenLevel</span><span class=\"p\">;</span>\t<span class=\"p\">}</span></code></pre></div></div><p>And on another file, called <code class=\"language-plaintext highlighter-rouge\">SaveManager.cs</code>, for every variable I have another variable with a string, a persist string, and it is something like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span><span class=\"c1\">// Pizzeria</span><span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"kt\">string</span> <span class=\"n\">playerName</span> <span class=\"p\">=</span> <span class=\"s\">\"v1_PLAYER_NAME\"</span><span class=\"p\">;</span><span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"kt\">string</span> <span class=\"n\">lastDate</span> <span class=\"p\">=</span> <span class=\"s\">\"v1_LAST_DATE\"</span><span class=\"p\">;</span><span class=\"c1\">// Pizzas</span><span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"kt\">string</span> <span class=\"n\">currentPizzas</span> <span class=\"p\">=</span> <span class=\"s\">\"v1_CURRENT_PIZZAS\"</span><span class=\"p\">;</span><span class=\"k\">private</span> <span class=\"k\">const</span> <span class=\"kt\">string</span> <span class=\"n\">lifetimePizzas</span> <span class=\"p\">=</span> <span class=\"s\">\"v1_LIFETIMEPIZZAS\"</span><span class=\"p\">;</span><span class=\"p\">...</span></code></pre></div></div><p>And finally, for me to save I can do something like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span><span class=\"c1\">// Incrementers</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">cursoreLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">cursoreLevel</span><span class=\"p\">);</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">gennaroLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">gennaroLevel</span><span class=\"p\">);</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">gasOvenLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">gasOvenLevel</span><span class=\"p\">);</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">eletricOvenLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">eletricOvenLevel</span><span class=\"p\">);</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">woodOvenLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">woodOvenLevel</span><span class=\"p\">);</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">plasmaOvenLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">plasmaOvenLevel</span><span class=\"p\">);</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">futureOvenLevel</span><span class=\"p\">,</span> <span class=\"n\">toPersist</span><span class=\"p\">.</span><span class=\"n\">futureOvenLevel</span><span class=\"p\">);</span><span class=\"p\">...</span></code></pre></div></div><p>So if I want to restore, I can do it like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">...</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">cursoreLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">cursoreLevel</span><span class=\"p\">);</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">gennaroLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">gennaroLevel</span><span class=\"p\">);</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">gasOvenLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">gasOvenLevel</span><span class=\"p\">);</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">eletricOvenLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">eletricOvenLevel</span><span class=\"p\">);</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">woodOvenLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">woodOvenLevel</span><span class=\"p\">);</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">plasmaOvenLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">plasmaOvenLevel</span><span class=\"p\">);</span><span class=\"n\">saveState</span><span class=\"p\">.</span><span class=\"n\">futureOvenLevel</span> <span class=\"p\">=</span> <span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">futureOvenLevel</span><span class=\"p\">);</span><span class=\"p\">...</span></code></pre></div></div><h3 id=\"what-if-i-want-to-add-an-incrementer\">What if I want to add an Incrementer?</h3><p>If I ever want to add an incrementer (which <strong>probably</strong> will be the case in a few weeks or months), I just have to follow the following list of tasks:</p><ol>  <li>Plan the incrementer, how much <em>ppc</em> or <em>pps</em> it will give;</li>  <li>Add it to the User Interface with the <code class=\"language-plaintext highlighter-rouge\">Incrementer.cs</code> script, all configured;</li>  <li>Go to the <code class=\"language-plaintext highlighter-rouge\">SaveState.cs</code> and add the new incrementer there;</li>  <li>Go to the <code class=\"language-plaintext highlighter-rouge\">SaveManager.cs</code> and create the string variable for the new incrementer, after that I have to add the new incrementer on the <code class=\"language-plaintext highlighter-rouge\">InitFirstTime()</code> function, and then I have to also add it on the <code class=\"language-plaintext highlighter-rouge\">GetSaveState()</code> and on <code class=\"language-plaintext highlighter-rouge\">PersistState(SaveState state)</code>;</li></ol><p>Needles to say steps 3 and 4 are <strong>very</strong> prone to error. If I mistaken something along the way the new incrementer can break, players will be upset and it will be bad. Also, if I want to add an incrementer when the game is already on production, I have to write code to migrate the save state from one way to another (i.e. recognize there is no “NewIncrementer” saved and that is because of the new version, so I have to initialize it on the save file with a 0).</p><p>In other words, to keep working this way, I would also have to work with a <code class=\"language-plaintext highlighter-rouge\">MigrateSave()</code> function, which at the moment looks like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">void</span> <span class=\"nf\">MigrateSave</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"c1\">// check what version is saved and what is the current version and migrate it.</span>\t<span class=\"c1\">// TO DO</span>\t<span class=\"k\">return</span><span class=\"p\">;</span> <span class=\"p\">}</span></code></pre></div></div><p>I want to keep it like this.</p><h2 id=\"what-if-everyone-handle-their-own-stuff\">What If Everyone Handle their own Stuff?</h2><p>I needed to add another feature on Pizza Clicker, the <em>Upgrades</em>, which are similar to how the Incrementers work, but instead of adding to how much pizza you produce, they just improve an Incrementer’s efficiency.</p><p>When I started, I was like: “Do I have to do all of that again? Create a variable for every upgrade and persist every one of them and migrate and…” - At some point I thought of doing the persistence on each individual Upgrade.</p><p>When I buy an upgrade, it immediately saves its value as 1. When Initializing the game it checks its own persistenceString and check whether or not it was bought. Looks better, right?</p><p>To save, I have to create just one more variable on <code class=\"language-plaintext highlighter-rouge\">Upgrade.cs</code>, a string which will be used to persist.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nf\">Header</span><span class=\"p\">(</span><span class=\"s\">\"Persistance Settings\"</span><span class=\"p\">)]</span><span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">persistString</span><span class=\"p\">;</span></code></pre></div></div><p>And then when initializing the game I can just check like this:</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">persistString</span> <span class=\"p\">!=</span> <span class=\"k\">null</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">persistString</span> <span class=\"p\">!=</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">GetInt</span><span class=\"p\">(</span><span class=\"n\">persistString</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"nf\">Apply</span><span class=\"p\">();</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>What is <code class=\"language-plaintext highlighter-rouge\">Apply()</code>? You may ask.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Apply</span><span class=\"p\">()</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span><span class=\"p\">(!</span><span class=\"n\">m_wasBought</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">incrementerToImprove</span><span class=\"p\">.</span><span class=\"n\">pizzaPerClick</span> <span class=\"p\">*=</span> <span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"p\">+</span> <span class=\"n\">pizzaPerClickImprovement</span><span class=\"p\">);</span>\t\t<span class=\"n\">incrementerToImprove</span><span class=\"p\">.</span><span class=\"n\">pizzaPerSecond</span> <span class=\"p\">*=</span> <span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"p\">+</span> <span class=\"n\">pizzaPerSecondImprovement</span><span class=\"p\">);</span>\t\t<span class=\"n\">PlayerPrefs</span><span class=\"p\">.</span><span class=\"nf\">SetInt</span><span class=\"p\">(</span><span class=\"n\">persistString</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">);</span>\t\t<span class=\"n\">m_wasBought</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">;</span>\t\t<span class=\"n\">Pizzeria</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"nf\">RecalculatePPCPPS</span><span class=\"p\">();</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>To summarize it quickly, the <code class=\"language-plaintext highlighter-rouge\">Apply()</code> function is called when the incrementer is bought or when the game is initialized and the persistString exists on the save file.</p><h3 id=\"what-if-i-want-to-add-an-upgrade\">What if I want to add an Upgrade?</h3><p>I <strong>will</strong> want to add more upgrades as time goes by. To do that I can simply follow this list of tasks:</p><ol>  <li>Plan the upgrade, which incrementer will it affect and how much;</li>  <li>Add it to the User Interface with the <code class=\"language-plaintext highlighter-rouge\">Upgrade.cs</code> script, all configured;</li>  <li>Set the <code class=\"language-plaintext highlighter-rouge\">persistString</code> attribute to something unique.</li></ol><p>There is just one point where I can make a mistake here and it is on <strong>Step 3</strong>, I can simply forget to set the string, which is easily caught on testing. Having only one possible error is way better than 3 or 4.</p><p>Aaand this is the story of the persistence of <a href=\"http://fourthdimension.studio/pizzaclicker/\">Pizza Clicker (download it here!)</a> - I know it’s nothing innovative or whatever, but it was something that happened to me and I wanted to write my thoughts on it.</p><p>Hope it helps someone somewhere!</p><p>You can get in contact with me whenever you want if you have any questions, all my social media and email are on my <a href=\"http://gueepo.me\">personal website</a></p>",
            "url": "https://gueepo.me/2018/12/01/what-if-everyone-handles-their-persistence",
            "image": "/images/techblog/persistent-cat.jpg",
            
            
            
            
            "date_published": "2018-12-01T12:00:00+01:00",
            "date_modified": "2018-12-01T12:00:00+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2018/07/24/ai-analysis-pokemon-puzzle-challenge",
            "title": "AI Analysis of Pokemon Puzzle Challenge",
            "summary": null,
            "content_text": "After 3 hours trying to download OpenEmu for Mac OS (Thanks Brazilian Internet) I was finally able to play Pokemon Puzzle Challenge and try to analyze it! (Don’t worry, I have a copy on my 3DS so it’s totally legal!)I wanted to play and analyze it so I can come with an idea on how to write my own AI for a game I’m working on. Game which has a very similar system to Pokemon Puzzle Challenge.First Thing: There are plenty of game modes. I will be basing myself on Challenge Mode and on Normal Difficulty, hopefully the other difficulties are just a matter of adjusting parameters.Also, the game I’m working on is inspired on Roguelike’s progression, so choosing a level of difficulty at the beggining is not going to hapen. I should just come with something that feels good, challenging and can be tuned to progressively provide more challenge to skilled players.I will perform three simple experiments:  Don’t play at all and see what happens.  Play very bad, just to survive long enough.  Play as I normally would.I actually recorded my doing this and you can see the video below.So here’s some basic annotations:While not playing  Enemy Threw a 4 at around 15 seconds.  Enemy Threw a 4 at around 40 seconds.While trying to play just to stay alive  Enemy Threw a 4 at around 15 seconds.  Enemy Threw a 6 at around 20 seconds.  Enemy Threw a 5 at around 50 seconds.  Enemy Threw a 5 at around 1 minute and 14 seconds.  Enemy Threw a 5 a around 1 minute and 40 seconds.  Enemy Threw a 4 at around 2 minutes and 4 seconds.  Enemy Threw a 6 at around 2 minutes and 8 seconds (just after I’ve sent a 6)  Enemy Threw a 6 at around 2 minutes and 38 seconds.Playing Normally  Enemy Threw a 4 at around 15 seconds.  Enemy Threw a 6 at around 20 seconds.  Enemy Threw a 4 at around 48 seconds.  Enemy Threw a 6 at around 52 seconds.It’s interesting to note that the AI always sent a 4 combo in 15 seconds. Coincidence? I guess not.From these observations what I would try to guess is that the AI is not really playing the game. This should be pretty obvious since you don’t actually see it playing, but on other games of the franchise, such as Tetris Attack you could actually see the AI playing.The “AI” seems to be just a system that drops blocks to the player, it probably has some pre determined rules (Drop 4 Combos on Second 15) and some rules that were written to adapt to how the player is playing. Observe the difference between the first and the last experiment, the length of the battle was the same, but the reaction of the enemy was totally different.So, basically, if I had to guess it would be a Rule Based System with rules based on how much damage the player dealt, in other words, how well the player is playing and rules based on time, how long since last block was sent to the player.Pretty simple, right?But these kind of systems allows to easily adapt to the player skills and provide bigger challenges just as you start the game. It is also pretty forgiving to new players.If the variables can be tuned in real time (during gameplay) this system could be really interesting.Oh, I think I got an idea.Anyway, that’s it for this blog post, in the near future (I hope) I should be making another post on how I coded the AI system in my game!Have a good day and you can always follow me on twitter!",
            "content_html": "<p>After 3 hours trying to download OpenEmu for Mac OS (Thanks Brazilian Internet) I was finally able to play Pokemon Puzzle Challenge and try to analyze it! (Don’t worry, I have a copy on my 3DS so it’s totally legal!)</p><p>I wanted to play and analyze it so I can come with an idea on how to write my own AI for a game I’m working on. Game which has a very similar system to Pokemon Puzzle Challenge.</p><p><strong>First Thing:</strong> There are plenty of game modes. I will be basing myself on Challenge Mode and on Normal Difficulty, hopefully the other difficulties are just a matter of adjusting parameters.</p><p>Also, the game I’m working on is inspired on Roguelike’s progression, so choosing a level of difficulty at the beggining is not going to hapen. I should just come with something that feels good, challenging and can be tuned to progressively provide more challenge to skilled players.</p><p>I will perform three simple experiments:</p><ol>  <li>Don’t play at all and see what happens.</li>  <li>Play very bad, just to survive long enough.</li>  <li>Play as I normally would.</li></ol><p>I actually recorded my doing this and you can see the video below.</p><p><a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=_wtOYX6rAIw\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/_wtOYX6rAIw/0.jpg\" alt=\"POKEMON PUZZLE CHALLENGE AI\" width=\"240\" height=\"180\" border=\"10\" /></a></p><p>So here’s some basic annotations:</p><p><strong>While not playing</strong></p><ol>  <li>Enemy Threw a 4 at around 15 seconds.</li>  <li>Enemy Threw a 4 at around 40 seconds.</li></ol><p><strong>While trying to play just to stay alive</strong></p><ol>  <li>Enemy Threw a 4 at around 15 seconds.</li>  <li>Enemy Threw a 6 at around 20 seconds.</li>  <li>Enemy Threw a 5 at around 50 seconds.</li>  <li>Enemy Threw a 5 at around 1 minute and 14 seconds.</li>  <li>Enemy Threw a 5 a around 1 minute and 40 seconds.</li>  <li>Enemy Threw a 4 at around 2 minutes and 4 seconds.</li>  <li>Enemy Threw a 6 at around 2 minutes and 8 seconds (just after I’ve sent a 6)</li>  <li>Enemy Threw a 6 at around 2 minutes and 38 seconds.</li></ol><p><strong>Playing Normally</strong></p><ol>  <li>Enemy Threw a 4 at around 15 seconds.</li>  <li>Enemy Threw a 6 at around 20 seconds.</li>  <li>Enemy Threw a 4 at around 48 seconds.</li>  <li>Enemy Threw a 6 at around 52 seconds.</li></ol><p>It’s interesting to note that the AI always sent a 4 combo in 15 seconds. Coincidence? I guess not.</p><p>From these observations what I would try to guess is that the AI is not really playing the game. This should be pretty obvious since you don’t actually <em>see</em> it playing, but on other games of the franchise, such as <em>Tetris Attack</em> you could actually see the AI playing.</p><p>The <em>“AI”</em> seems to be just a system that drops blocks to the player, it probably has some pre determined rules (Drop 4 Combos on Second 15) and some rules that were written to adapt to how the player is playing. Observe the difference between the first and the last experiment, the length of the battle was the <em>same</em>, but the reaction of the enemy was totally different.</p><p>So, basically, if I had to guess it would be a Rule Based System with rules based on <em>how much damage</em> the player dealt, in other words, how well the player is playing and rules based on time, <em>how long since last block was sent to the player</em>.</p><p>Pretty simple, right?</p><p>But these kind of systems allows to easily adapt to the player skills and provide bigger challenges just as you start the game. It is also pretty forgiving to new players.</p><p>If the variables can be tuned in real time (during gameplay) this system could be really interesting.</p><p>Oh, I think I got an idea.</p><p>Anyway, that’s it for this blog post, in the near future (I hope) I should be making another post on <em>how</em> I coded the AI system in my game!</p><p>Have a good day and you can always follow me on <a href=\"http://twitter.com/guilhermepo2\">twitter</a>!</p>",
            "url": "https://gueepo.me/2018/07/24/ai-analysis-pokemon-puzzle-challenge",
            "image": "/images/techblog/pkm-puzzle.jpg",
            
            
            
            
            "date_published": "2018-07-24T00:31:20+02:00",
            "date_modified": "2018-07-24T00:31:20+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2018/07/16/a-better-random-alternative",
            "title": "A Better Random Alternative to Straight Random Range",
            "summary": null,
            "content_text": "First thing, I saw about this method first on this blog post - But it talks about more things than just the randomness, so I decided to write this blog post as I was having troubles with random generated stuff.Context: I am currently doing a tetris implementation. And I’m having trouble with the way the pieces are generated on screen.What do I currently Have?My current code looks like this:int i = Random.Range(0, mAllShapes.Length);Where mAllShapes is my array with all seven Tetris shapes.The results of this method is pretty bad. I can’t really point you the reason why but it just feels bad. It is not rare to get the same shape three times in a row and it is not rare simply not getting a specific shape for a really long time.And when talking about Game Development, if something feels bad, it is our duty to change it.What approach should I use?The idea is pretty simple, instead of getting a random shape out of nowhere, we build a bag (which is actually a vector or an array) with the shapes repeated n times. And then we shuffle the bag using randomness!First Step: Having a vector of Shapes - Tetris has seven shapes and I will use 15 of each, resulting in 105 Shapes.mShapesBag = new Shape[(mShapeAmmount * mAllShapes.Length)];Look! I created a variable mShapeAmmount (which is 15) so if I decide to change it in the future I can! I am such a good programmer!Second Step: Populating the vector.void InitShapeBag() {    int tIndex = 0;\tforeach(Shape shape in mAllShapes) {\t\tfor(int i = 0; i &lt; mShapeAmmount; i++) {\t\t\tmShapesBag[tIndex] = shape;\t\t\ttIndex++;\t\t}\t}}(I’m pretty sure there is a better and more optimizable way to do this, but it will do for now)Third Step: Shuffle it! With the Knuth shuffle algorithm.void ShuffleBag() {    for(int i = 0; i &lt; mShapesBag.Length; i++) {        Shape tShape = mShapesBag[i];\t\tint tRandomIndex = Random.Range(i, mShapesBag.Length);\t\tmShapesBag[i] = mShapesBag[tRandomIndex];\t\tmShapesBag[tRandomIndex] = tShape;\t}}I’ve chosen to do it in-place.Fourth Step: When getting a new shape, let’s get it from our vector!Shape GetRandomShape() {    if(mCurrentIndex &gt;= mShapesBag.Length) {\t\tmCurrentIndex = 0;\t\tInitShapeBag();\t\tShuffleBag();\t}\treturn mShapesBag[mCurrentIndex++];}Keep in mind that doing this InitShapeBag and ShuffleBag stuff while playing can result in a big latency and bother the player’s experience at this moment.Always playtest.Fortunately, Tetris is a simple problem and the vector is not tha big, so reinitializing the vector and shuffling goes unnoticed.Hmm… That’s pretty much it for this blog post.Just a quick awareness post so people avoid going straight to Random.Range() way of doing random things, there is always better approaches that will result on better player experience overall.This Bag/Knuth Shuffle method makes the result more evenly distribuited, which is usually what we expect from randomness.Any doubt, questions or anything feel free to contact me on twitter!",
            "content_html": "<p>First thing, I saw about this method first on this <a href=\"https://newarteest.wordpress.com/2017/11/25/some-useful-scripts/\">blog post</a> - But it talks about more things than just the randomness, so I decided to write this blog post as I was having troubles with random generated stuff.</p><p><strong>Context:</strong> I am currently doing a tetris implementation. And I’m having trouble with the way the pieces are generated on screen.</p><h3 id=\"what-do-i-currently-have\">What do I currently Have?</h3><p>My current code looks like this:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>int i = Random.Range(0, mAllShapes.Length);</code></pre></div></div><p>Where mAllShapes is my array with all seven Tetris shapes.</p><p>The results of this method is pretty bad. I can’t really point you the reason why but it just <em>feels</em> bad. It is not rare to get the same shape three times in a row and it is not rare simply not getting a specific shape for a really long time.</p><p>And when talking about Game Development, if something feels bad, it is our duty to change it.</p><h3 id=\"what-approach-should-i-use\">What approach should I use?</h3><p>The idea is pretty simple, instead of getting a random shape out of nowhere, we build a <em>bag</em> (which is actually a vector or an array) with the shapes repeated <em>n</em> times. And <em>then</em> we shuffle the bag using randomness!</p><p><strong>First Step:</strong> Having a vector of Shapes - Tetris has seven shapes and I will use 15 of each, resulting in 105 Shapes.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mShapesBag = new Shape[(mShapeAmmount * mAllShapes.Length)];</code></pre></div></div><p>Look! I created a variable mShapeAmmount (which is 15) so if I decide to change it in the future I can! I am such a good programmer!</p><p><strong>Second Step:</strong> Populating the vector.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">void</span> <span class=\"nf\">InitShapeBag</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kt\">int</span> <span class=\"n\">tIndex</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span>\t<span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"n\">Shape</span> <span class=\"n\">shape</span> <span class=\"k\">in</span> <span class=\"n\">mAllShapes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"n\">mShapeAmmount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++)</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">mShapesBag</span><span class=\"p\">[</span><span class=\"n\">tIndex</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">shape</span><span class=\"p\">;</span>\t\t\t<span class=\"n\">tIndex</span><span class=\"p\">++;</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>(I’m pretty sure there is a better and more optimizable way to do this, but it will do for now)</p><p><strong>Third Step:</strong> Shuffle it! With the <strong>Knuth shuffle</strong> algorithm.</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">void</span> <span class=\"nf\">ShuffleBag</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"n\">mShapesBag</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++)</span> <span class=\"p\">{</span>        <span class=\"n\">Shape</span> <span class=\"n\">tShape</span> <span class=\"p\">=</span> <span class=\"n\">mShapesBag</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\t\t<span class=\"kt\">int</span> <span class=\"n\">tRandomIndex</span> <span class=\"p\">=</span> <span class=\"n\">Random</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">mShapesBag</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">);</span>\t\t<span class=\"n\">mShapesBag</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">mShapesBag</span><span class=\"p\">[</span><span class=\"n\">tRandomIndex</span><span class=\"p\">];</span>\t\t<span class=\"n\">mShapesBag</span><span class=\"p\">[</span><span class=\"n\">tRandomIndex</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">tShape</span><span class=\"p\">;</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>I’ve chosen to do it in-place.</p><p><strong>Fourth Step:</strong> When getting a new shape, let’s get it from our vector!</p><div class=\"language-c# highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Shape</span> <span class=\"nf\">GetRandomShape</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">mCurrentIndex</span> <span class=\"p\">&gt;=</span> <span class=\"n\">mShapesBag</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">mCurrentIndex</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span>\t\t<span class=\"nf\">InitShapeBag</span><span class=\"p\">();</span>\t\t<span class=\"nf\">ShuffleBag</span><span class=\"p\">();</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">mShapesBag</span><span class=\"p\">[</span><span class=\"n\">mCurrentIndex</span><span class=\"p\">++];</span><span class=\"p\">}</span></code></pre></div></div><p>Keep in mind that doing this InitShapeBag and ShuffleBag stuff <strong>while</strong> playing can result in a big latency and bother the player’s experience at this moment.</p><p><strong>Always</strong> playtest.</p><p>Fortunately, Tetris is a simple problem and the vector is not tha big, so reinitializing the vector and shuffling goes unnoticed.</p><p>Hmm… That’s pretty much it for this blog post.</p><p>Just a quick awareness post so people avoid going straight to <code class=\"language-plaintext highlighter-rouge\">Random.Range()</code> way of doing random things, there is always better approaches that will result on better player experience overall.</p><p>This Bag/Knuth Shuffle method makes the result more evenly distribuited, which is usually what we expect from randomness.</p><p>Any doubt, questions or anything feel free to contact me on <a href=\"http://twitter.com/guilhermepo2\">twitter</a>!</p>",
            "url": "https://gueepo.me/2018/07/16/a-better-random-alternative",
            "image": "/images/techblog/dice-roll.jpg",
            
            
            
            
            "date_published": "2018-07-16T02:37:20+02:00",
            "date_modified": "2018-07-16T02:37:20+02:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://gueepo.me/2018/01/10/simple-ci-for-cpp",
            "title": "Setting Up Circle CI on GitHub for C++ and CMake",
            "summary": null,
            "content_text": "It’s been 3 months or more since I started my internship on automated testing. I studied and learned about docker, testing libraries, automated testing (of course), continuous development and, finally, continuous integration. Knowing about all of this made me a programmer twice as better than I was. This is a lot of improvement for 3 months and some days. So I started picking interest in testing related tasks also on personal projects and on my most recent one I decided to set up a CI environment on GitHub.I had a bit of trouble configuring it at first and I couldn’t find a lot of help from the internet, I had to pick some things here and there but there wasn’t an unique resource about what I wanted to do. Well, now there is since I decided to write about it.What is Continuous Integration ? (CI)Keeping it simple, it is building a pipeline that will be executed in every commit at your most updated branch on git, this pipeline builds (usually using a container) the whole environment needed for the tests and execute all the tests you’ve coded. If all tests pass, you are happy and the changes were successful. In a real life scenario, you can ship your software after this step. If any test fail, you can fix it as soon as possible, this is better than finding out about bugs when you wrote 1000 lines of extra code relying on that buggy function.There is also a Management side to it. Software Engineering used to be all about interviewing your client and then developing the software apart from your client, doesn’t take much to know that everything went wrong on this model. Nowadays we use Agile methodologies (i.e. Scrum) and try to deliver to the client as fast as we can.As deliveries are fast, so is development, commits and everything else basically. So you need a way to verify that every new feature won’t break what is already there. Imagine your client is happy with two pieces of your product, you give to them the third piece but it breaks the other two, not good.If you have good and automated software testing covering an important part of your product, you are less likely to deploy something broken to your client, which is nice.No More Rubber Duck Debugging! Or… Plastic Finn Debugging, anyway… You got it.What are we going to do?Basically setting up a really simple project with C++ and CMake, write tests for it and then use Circle CI to test it at every update.  The C++ Code: I will use a simple class I’m using in a current project, the Point class, it has two attributes, x and y, and some methods to manipulate them, that’s all.  CMake File.  Writing Tests for the Point Function (using Catch).  Building and Running Locally the Tests.  Setting Up Circle CI.Doing it.This is by no means a C++, CMake, Unit Testing or Catch sort of tutorial, I’m assuming that you know them or have at least some familiarity to understand the code below. Anyway, the code should be pretty straightforward for anyone with some programming background.  The code is publicly available here.The C++ Codepoint.hpp#ifndef __POINT__#define __POINT__class Point {private:    int x;    int y;public:    Point() { this-&gt;x = 0; this-&gt;y=0; }    const inline int getX() { return this-&gt;x; }    const inline int getY() { return this-&gt;y; }    inline void setX(int x) { this-&gt;x = x; }    inline void setY(int y) { this-&gt;y = y; }};#endifCMake Filecmake_minimum_required(VERSION 2.8)set(CMAKE_CXX_STANDARD 11)project(cpp-cmake-circle-ci)set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)add_executable(point_test ${PROJECT_SOURCE_DIR}/src/pointTest.cpp)Writing Tests for the Point FunctionFor testing in C++, I like the Catch2 library.pointTest.cpp#define CATCH_CONFIG_MAIN#include \"libs/catch.hpp\"#include \"point.hpp\"TEST_CASE(\"Creating a Point\", \"[point]\") {    Point p;    REQUIRE(p.getX() == 0);    REQUIRE(p.getY() == 0);}TEST_CASE(\"Creating and Setting Values to a Point\", \"[point]\") {    Point p;    p.setX(2);    p.setY(3);    REQUIRE(p.getX() == 2);    REQUIRE(p.getY() == 3);}Building using CMake and executing the tests.Yay! Now we have a point class and we have succesfully tested it, we can now peacefully create points whenever we want and we will trust the code works because the test said it does, now let’s set up the CI environment!.Setting UP the CI EnvironmentThe Continuous Integration environment I’m going to use is Circle CI. I encourage you to visit their website and skim through what it does and on the documentation.When you are ready, Sign Up. It is easier to use your GitHub account, but do what you like the most. Go to your GitHub page and visit the Marketplace, you will find Circle CI under the Continuous Integration category or you can just search for it. If you want the direct link here it is. “Buy” it (it’s not buying since it’s free, although it has paid options).Now on CircleCI, Log In if you haven’t already, you should be seeing your Dashboard. Link it with GitHub, if you haven’t already, to have access to your repositories. Add a New Project on the Projects session and choose your desired Repository, click on Setup Project. Image Below for better understanding.You will read the following:  CircleCI helps you ship better code, faster. To kick things off, you’ll need to add a config.yml file to your project, and start building. After that, we’ll start a new build for you each time someone pushes a new commit.It comes pretty much all set for you, we usually want to use Linux Operating System and the version 2.0.Now we have to do as Circle CI says:  Create a folder named .circleci and add a file config.yml (so that the filepath be in .circleci/config.yml).Unfortunately, there isn’t a sample config.yml file for our project settings, so I will guide you through it. If you aren’t very familiar with .yml files, I suggest that you read more about it. Also, if you aren’t very familiar with docker or containers, I suggest you to be. Please, consider learning more about Docker. As you can read on docker’s main page: Build, Ship, and Run Any App, Anywhere - Pretty powerful, eh?The config.yml fileFor testing in the Circle CI, a docker container is used, we are going to use the image debian:stretch, which is a simple Linux Image with few functionalities, so we are going to need to install what we are effectively going to use: sudo, gcc and g++ and, finally, cmake.Every .yml file begins with the current version, which for this case is version 2.We need to define our jobs, a job is a task executed on the continuous integration environment. We will call our job build and, for this simple  scenario, we are going to do everything in this job. The build job needs to have a defined docker image and its steps are:  Installing SUDO  Installing GCC and G++  Installing CMAKE  Creating the Build Files  Building the Project  Executing the point testobs: it is common to execute unit tests on the build routine, it is common to not do it. Your project, your resources, your decision.obs2: .yml files are determined by 2-space indentation, so be careful when writing your own.The first thing to do on a .yml file is to declare we have a job, in this case we are going to have only one job. A job requires its, well, job. Which in this case is the build job.version: 2jobs:  build:Be careful on the identation!!!The build job requires two things: (i) a docker image, and (ii) its steps, where the magic effectively will happen.A good docker image on this is the image “debian:stretch” and down here is an example with the step to install SUDO.version: 2jobs:  build:    docker:      - image: \"debian:stretch\"    steps:      - checkout      - run:          name: Installing SUDO          command: 'apt-get update &amp;&amp; apt-get install -y sudo &amp;&amp; rm -rf /var/lib/apt/lists/*'I could waste your time and my time here writing about each step, but I’m just going to show you the final config.yml file to build everything needed for running a C++ Project with CMAKE and run its Unit Tests.There’s not much secret to it, it’s all about writin the right .yml config.The final config.yml file:version: 2jobs:  build:    docker:      - image: \"debian:stretch\"    steps:      - checkout      - run:          name: Installing SUDO          command: 'apt-get update &amp;&amp; apt-get install -y sudo &amp;&amp; rm -rf /var/lib/apt/lists/*'      - run:          name: Installing GCC          command: 'apt-get update &amp;&amp; apt-get install -y gcc g++'      - run:          name: Install CMAKE          command: 'apt-get update &amp;&amp; sudo apt-get install -y cmake'      - run:          name: Creating Build Files          command: 'cmake -H. -Bbuild'      - run:          name: Creating Binary Files          command: 'cmake --build build'      - run:          name: Point Unit Testing          command: './bin/point_test'Everything is finally set up. Commit and Push the config.yml file and let’s do some minor changes on our project to see if it really works.It’s obvious that I got a bit lost while writing the final of this article as explaining how to config with a .yml is something a bit… I don’t know. So any thing you would to ask about it just reach me on twitter or email or anywhere else.",
            "content_html": "<p>It’s been 3 months or more since I started my internship on automated testing. I studied and learned about docker, testing libraries, automated testing (of course), continuous development and, finally, continuous integration. Knowing about all of this made me a programmer twice as better than I was. This is a lot of improvement for 3 months and some days. So I started picking interest in testing related tasks also on personal projects and on my most recent one I decided to set up a CI environment on GitHub.</p><p>I had a bit of trouble configuring it at first and I couldn’t find a lot of help from the internet, I had to pick some things here and there but there wasn’t an unique resource about what I wanted to do. Well, now there is since I decided to write about it.</p><h2 id=\"what-is-continuous-integration--ci\">What is Continuous Integration ? (CI)</h2><p>Keeping it simple, it is building a pipeline that will be executed in every commit at your most updated branch on git, this pipeline builds (usually using a container) the whole environment needed for the tests and execute all the tests you’ve coded. If all tests pass, you are happy and the changes were successful. In a real life scenario, you can ship your software after this step. If any test fail, you can fix it as soon as possible, this is better than finding out about bugs when you wrote 1000 lines of extra code relying on that buggy function.</p><p>There is also a Management side to it. Software Engineering used to be all about interviewing your client and then developing the software apart from your client, doesn’t take much to know that everything went wrong on this model. Nowadays we use Agile methodologies (i.e. Scrum) and try to deliver to the client as fast as we can.</p><p>As deliveries are fast, so is development, commits and everything else basically. So you <strong>need</strong> a way to verify that every new feature won’t break what is already there. Imagine your client is happy with two pieces of your product, you give to them the third piece but it breaks the other two, not good.</p><p>If you have good and automated software testing covering an important part of your product, you are less likely to deploy something broken to your client, which is nice.</p><p><img src=\"/images/techblog/debugging-finn.jpg\" alt=\"No More Rubber Duck Debugging!\" /></p><p><em>No More Rubber Duck Debugging! Or… Plastic Finn Debugging, anyway… You got it.</em></p><h2 id=\"what-are-we-going-to-do\">What are we going to do?</h2><p>Basically setting up a really simple project with C++ and CMake, write tests for it and then use Circle CI to test it at every update.</p><ol>  <li><strong>The C++ Code:</strong> I will use a simple class I’m using in a current project, the <em>Point</em> class, it has two attributes, x and y, and some methods to manipulate them, that’s all.</li>  <li>CMake File.</li>  <li>Writing Tests for the Point Function (using Catch).</li>  <li>Building and Running Locally the Tests.</li>  <li>Setting Up Circle CI.</li></ol><h2 id=\"doing-it\">Doing it.</h2><p>This is by no means a C++, CMake, Unit Testing or Catch sort of tutorial, I’m assuming that you know them or have at least some familiarity to understand the code below. Anyway, the code should be pretty straightforward for anyone with some programming background.  The code is publicly available <a href=\"https://github.com/guilhermepo2/cpp-cmake-circle-ci\">here</a>.</p><h3 id=\"the-c-code\">The C++ Code</h3><h4 id=\"pointhpp\">point.hpp</h4><div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#ifndef __POINT__#define __POINT__</span><span class=\"k\">class</span> <span class=\"nc\">Point</span> <span class=\"p\">{</span><span class=\"nl\">private:</span>    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>    <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span><span class=\"nl\">public:</span>    <span class=\"n\">Point</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"k\">const</span> <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">getX</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"k\">const</span> <span class=\"kr\">inline</span> <span class=\"kt\">int</span> <span class=\"n\">getY</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">setX</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"p\">}</span>    <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"n\">setY</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"p\">};</span><span class=\"cp\">#endif</span></code></pre></div></div><h3 id=\"cmake-file\">CMake File</h3><div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"n\">VERSION</span> <span class=\"mf\">2.8</span><span class=\"p\">)</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">CMAKE_CXX_STANDARD</span> <span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"n\">project</span><span class=\"p\">(</span><span class=\"n\">cpp</span><span class=\"o\">-</span><span class=\"n\">cmake</span><span class=\"o\">-</span><span class=\"n\">circle</span><span class=\"o\">-</span><span class=\"n\">ci</span><span class=\"p\">)</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">EXECUTABLE_OUTPUT_PATH</span> <span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">CMAKE_SOURCE_DIR</span><span class=\"p\">}</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"p\">)</span><span class=\"n\">add_executable</span><span class=\"p\">(</span><span class=\"n\">point_test</span> <span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">PROJECT_SOURCE_DIR</span><span class=\"p\">}</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">pointTest</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"p\">)</span></code></pre></div></div><h3 id=\"writing-tests-for-the-point-function\">Writing Tests for the Point Function</h3><p>For testing in C++, I like the <a href=\"https://github.com/catchorg/Catch2\">Catch2</a> library.</p><h4 id=\"pointtestcpp\">pointTest.cpp</h4><div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#define CATCH_CONFIG_MAIN#include \"libs/catch.hpp\"#include \"point.hpp\"</span><span class=\"n\">TEST_CASE</span><span class=\"p\">(</span><span class=\"s\">\"Creating a Point\"</span><span class=\"p\">,</span> <span class=\"s\">\"[point]\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"p\">;</span>    <span class=\"n\">REQUIRE</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>    <span class=\"n\">REQUIRE</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"n\">TEST_CASE</span><span class=\"p\">(</span><span class=\"s\">\"Creating and Setting Values to a Point\"</span><span class=\"p\">,</span> <span class=\"s\">\"[point]\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"n\">Point</span> <span class=\"n\">p</span><span class=\"p\">;</span>    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">setX</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">setY</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>    <span class=\"n\">REQUIRE</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">);</span>    <span class=\"n\">REQUIRE</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"building-using-cmake-and-executing-the-tests\">Building using CMake and executing the tests.</h3><p><img src=\"/images/techblog/point-test.png\" alt=\"It works!!\" /></p><p>Yay! Now we have a point class and we have succesfully tested it, we can now peacefully create points whenever we want and we will trust the code works because the test said it does, now let’s set up the CI environment!.</p><h3 id=\"setting-up-the-ci-environment\">Setting UP the CI Environment</h3><p>The Continuous Integration environment I’m going to use is <a href=\"https://circleci.com\">Circle CI</a>. I encourage you to visit their website and skim through what it does and on the documentation.</p><p>When you are ready, Sign Up. It is easier to use your GitHub account, but do what you like the most. Go to your <a href=\"https://github.com\">GitHub</a> page and visit the <a href=\"https://github.com/marketplace\">Marketplace</a>, you will find <em>Circle CI</em> under the Continuous Integration category or you can just search for it. If you want the direct link <a href=\"https://github.com/marketplace/circleci\">here it is</a>. “Buy” it (it’s not buying since it’s free, although it has paid options).</p><p>Now on CircleCI, Log In if you haven’t already, you should be seeing your Dashboard. Link it with GitHub, if you haven’t already, to have access to your repositories. Add a <em>New Project</em> on the <em>Projects</em> session and choose your desired Repository, click on Setup Project. Image Below for better understanding.</p><p><img src=\"/images/techblog/project-on-circle-ci.png\" alt=\"Project on Circle CI\" /></p><p>You will read the following:</p><blockquote>  <p>CircleCI helps you ship better code, faster. To kick things off, you’ll need to add a config.yml file to your project, and start building. After that, we’ll start a new build for you each time someone pushes a new commit.</p></blockquote><p>It comes pretty much all set for you, we usually want to use Linux Operating System and the version 2.0.</p><p>Now we have to do as Circle CI says:</p><blockquote>  <p>Create a folder named .circleci and add a file config.yml (so that the filepath be in .circleci/config.yml).</p></blockquote><p>Unfortunately, there isn’t a sample <code class=\"language-plaintext highlighter-rouge\">config.yml</code> file for our project settings, so I will guide you through it. If you aren’t very familiar with .yml files, I suggest that you <a href=\"http://yaml.org\">read more</a> about it. Also, if you aren’t very familiar with docker or containers, I suggest you <a href=\"https://www.docker.com\">to be</a>. <em>Please, consider learning more about Docker. As you can read on docker’s main page: Build, Ship, and Run Any App, Anywhere - Pretty powerful, eh?</em></p><h4 id=\"the-configyml-file\">The config.yml file</h4><p>For testing in the Circle CI, a docker container is used, we are going to use the image <em>debian:stretch</em>, which is a simple Linux Image with few functionalities, so we are going to need to install what we are effectively going to use: <strong>sudo</strong>, <strong>gcc and g++</strong> and, finally, <strong>cmake</strong>.</p><p>Every .yml file begins with the current version, which for this case is <code class=\"language-plaintext highlighter-rouge\">version 2</code>.</p><p>We need to define our <strong>jobs</strong>, a job is a task executed on the continuous integration environment. We will call our job <em>build</em> and, for this simple  scenario, we are going to do everything in this job. The build job needs to have a defined docker image and its steps are:</p><ol>  <li>Installing SUDO</li>  <li>Installing GCC and G++</li>  <li>Installing CMAKE</li>  <li>Creating the Build Files</li>  <li>Building the Project</li>  <li>Executing the point test</li></ol><p><strong>obs:</strong> it is common to execute unit tests on the build routine, it is common to not do it. Your project, your resources, your decision.</p><p><strong>obs2:</strong> <em>.yml</em> files are determined by 2-space indentation, so be careful when writing your own.</p><p>The first thing to do on a <em>.yml</em> file is to declare we have a <em>job</em>, in this case we are going to have only one job. A job requires its, well, job. Which in this case is the <em>build</em> job.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>version: 2jobs:  build:</code></pre></div></div><p><em>Be careful on the identation!!!</em></p><p>The build job requires two things: (i) a <em>docker</em> image, and (ii) its <em>steps</em>, where the magic effectively will happen.</p><p>A good docker image on this is the image <em>“debian:stretch”</em> and down here is an example with the step to install SUDO.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>version: 2jobs:  build:    docker:      - image: \"debian:stretch\"    steps:      - checkout      - run:          name: Installing SUDO          command: 'apt-get update &amp;&amp; apt-get install -y sudo &amp;&amp; rm -rf /var/lib/apt/lists/*'</code></pre></div></div><p>I could waste your time and my time here writing about each step, but I’m just going to show you the final config.yml file to build everything needed for running a C++ Project with CMAKE and run its Unit Tests.</p><p>There’s not much secret to it, it’s all about writin the right <em>.yml</em> config.</p><h4 id=\"the-final-configyml-file\">The final config.yml file:</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>version: 2jobs:  build:    docker:      - image: \"debian:stretch\"    steps:      - checkout      - run:          name: Installing SUDO          command: 'apt-get update &amp;&amp; apt-get install -y sudo &amp;&amp; rm -rf /var/lib/apt/lists/*'      - run:          name: Installing GCC          command: 'apt-get update &amp;&amp; apt-get install -y gcc g++'      - run:          name: Install CMAKE          command: 'apt-get update &amp;&amp; sudo apt-get install -y cmake'      - run:          name: Creating Build Files          command: 'cmake -H. -Bbuild'      - run:          name: Creating Binary Files          command: 'cmake --build build'      - run:          name: Point Unit Testing          command: './bin/point_test'</code></pre></div></div><p>Everything is finally set up. Commit and Push the <em>config.yml</em> file and let’s do some minor changes on our project to see if it really works.</p><p>It’s obvious that I got a bit lost while writing the final of this article as explaining how to config with a .yml is something a bit… I don’t know. So any thing you would to ask about it just reach me on twitter or email or anywhere else.</p>",
            "url": "https://gueepo.me/2018/01/10/simple-ci-for-cpp",
            "image": "/images/techblog/mistake.jpg",
            
            
            "tags": ["c++","cmake","ci"],
            
            "date_published": "2018-01-10T13:37:20+01:00",
            "date_modified": "2018-01-10T13:37:20+01:00",
            
                "author":  {
                "name": "gueepo",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}